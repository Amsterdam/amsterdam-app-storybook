{"version":3,"file":"Image.stories-6eccdb08.js","sources":["../../.storybook/mocks/fast-image/index.ts","../../src/components/ui/utils/image.ts","../../src/components/ui/media/Image.tsx","../../src/modules/welcome/assets/images/62225.wees-jezelf.4x5.md.jpg"],"sourcesContent":["export type ImageStyle = unknown\n\nexport default () => null\n","import {ImageURISource, PixelRatio} from 'react-native'\nimport {isDevApp} from '@/processes/development'\n\nexport const sortSourcesByWidthAscending = (\n  {width: widthA = 0}: ImageURISource,\n  {width: widthB = 0}: ImageURISource,\n) => {\n  if (widthA > widthB) {\n    return 1\n  }\n\n  if (widthA < widthB) {\n    return -1\n  }\n\n  return 0\n}\n\n/**\n * Get the URI for an image from an ImageURISource or an array of ImageURISources. If there are multiple sources, determine the most suited image size.\n * This is the narrowest image that is wider than the available width, which is the width param times the device pixel density.\n */\nexport const getUriForWidth = (\n  uriSources: ImageURISource | ImageURISource[],\n  width: number,\n) => {\n  if (!Array.isArray(uriSources)) {\n    return uriSources.uri\n  }\n\n  // This prevents an issue that prevents images from being rendered when hot reloading\n  if (isDevApp && !width) {\n    width = 1000\n  }\n\n  if (!width) {\n    return\n  }\n\n  const sortedSources = [...uriSources].sort(sortSourcesByWidthAscending)\n  const minWidth = PixelRatio.getPixelSizeForLayoutSize(width)\n  const firstSourceLargerThanMinWidth = sortedSources.find(\n    ({width: sourceWidth = 0}: ImageURISource) => sourceWidth >= minWidth,\n  )\n\n  if (!firstSourceLargerThanMinWidth) {\n    return sortedSources.pop()?.uri\n  }\n\n  return firstSourceLargerThanMinWidth.uri\n}\n","import {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  Image as ImageRN,\n  ImageProps as ImageRNProps,\n  ImageURISource,\n  LayoutChangeEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  useWindowDimensions,\n} from 'react-native'\nimport FastImage, {ImageStyle as FastImageStyle} from 'react-native-fast-image'\nimport {getUriForWidth} from '@/components/ui/utils/image'\nimport {Theme} from '@/themes/themes'\nimport {ImageAspectRatioTokens} from '@/themes/tokens/media'\nimport {useThemable} from '@/themes/useThemable'\n\n// Image props supported by both Image and FastImage\ntype SupportedImageRNProps = Omit<\n  ImageRNProps,\n  'defaultSource' | 'onError' | 'onLoad' | 'resizeMode'\n>\n\ntype Props = {\n  aspectRatio?: keyof ImageAspectRatioTokens\n} & Omit<SupportedImageRNProps, 'style'>\n\ntype CachedIosImageProps = {\n  uriSources: ImageURISource | ImageURISource[]\n  width?: number\n} & Omit<SupportedImageRNProps, 'source'>\n\nconst CachedIosImage = ({\n  onLayout,\n  style,\n  uriSources,\n  width = 0,\n  ...imageProps\n}: CachedIosImageProps) => {\n  const uri = useMemo(\n    () => getUriForWidth(uriSources, width),\n    [uriSources, width],\n  )\n\n  return (\n    <FastImage\n      accessibilityIgnoresInvertColors\n      onLayout={onLayout}\n      source={{uri}}\n      style={style as StyleProp<FastImageStyle>}\n      {...imageProps}\n    />\n  )\n}\n\nexport const Image = ({\n  aspectRatio = 'wide',\n  onLayout,\n  source,\n  ...imageProps\n}: Props) => {\n  const {height: windowHeight, width: windowWidth} = useWindowDimensions()\n  const [width, setWidth] = useState<number | undefined>(undefined)\n\n  const createdStyles = useMemo(\n    () => createStyles(aspectRatio, width),\n    [aspectRatio, width],\n  )\n  const styles = useThemable(createdStyles)\n\n  useEffect(() => {\n    // reset saved width on every window size change, so the image is allowed to grow bigger\n    setWidth(undefined)\n  }, [windowHeight, windowWidth])\n\n  const onLayoutChange = useCallback(\n    (event: LayoutChangeEvent) => {\n      setWidth(event.nativeEvent.layout.width)\n      onLayout?.(event)\n    },\n    [onLayout, setWidth],\n  )\n\n  // RN default image caching behaviour works well on Android, but not on iOS. So for iOS we use FastImage, which has improved cacheing.\n  // The number type check filters out bundled images using require which do not need to be cached.\n  if (Platform.OS === 'ios' && typeof source !== 'number') {\n    return (\n      <CachedIosImage\n        onLayout={onLayoutChange}\n        style={[styles.image]}\n        uriSources={source}\n        width={width}\n        {...imageProps}\n      />\n    )\n  }\n\n  return (\n    <ImageRN\n      accessibilityIgnoresInvertColors\n      onLayout={onLayoutChange}\n      source={source}\n      style={[styles.image]}\n      {...imageProps}\n    />\n  )\n}\n\nconst createStyles =\n  (aspectRatio: keyof ImageAspectRatioTokens, width?: number) =>\n  ({media}: Theme) => {\n    const aspectRatioValue = media.aspectRatio[aspectRatio]\n\n    return StyleSheet.create({\n      image: {\n        width: undefined,\n        maxWidth: '100%',\n        height:\n          Platform.OS === 'android' && width && aspectRatioValue > 0\n            ? width / aspectRatioValue\n            : undefined,\n        flex: 1,\n        aspectRatio: aspectRatioValue,\n        resizeMode: 'cover',\n      },\n    })\n  }\n","export default \"__VITE_ASSET__c9bf283c__\""],"names":["FastImage","sortSourcesByWidthAscending","widthA","widthB","getUriForWidth","uriSources","width","isDevApp","sortedSources","minWidth","PixelRatio","firstSourceLargerThanMinWidth","sourceWidth","_a","CachedIosImage","onLayout","style","imageProps","uri","useMemo","jsx","Image","aspectRatio","source","windowHeight","windowWidth","useWindowDimensions","setWidth","useState","createdStyles","createStyles","styles","useThemable","useEffect","onLayoutChange","useCallback","event","Platform","ImageRN","media","aspectRatioValue","StyleSheet"],"mappings":"wYAEA,MAAAA,EAAe,IAAM,KCCRC,EAA8B,CACzC,CAAC,MAAOC,EAAS,CAAC,EAClB,CAAC,MAAOC,EAAS,KAEbD,EAASC,EACJ,EAGLD,EAASC,EACJ,GAGF,EAOIC,EAAiB,CAC5BC,EACAC,IACG,OACH,GAAI,CAAC,MAAM,QAAQD,CAAU,EAC3B,OAAOA,EAAW,IAQpB,GAJIE,GAAY,CAACD,IACPA,EAAA,KAGN,CAACA,EACH,OAGF,MAAME,EAAgB,CAAC,GAAGH,CAAU,EAAE,KAAKJ,CAA2B,EAChEQ,EAAWC,EAAW,0BAA0BJ,CAAK,EACrDK,EAAgCH,EAAc,KAClD,CAAC,CAAC,MAAOI,EAAc,KAAuBA,GAAeH,CAAA,EAG/D,OAAKE,EAIEA,EAA8B,KAH5BE,EAAAL,EAAc,IAAO,IAArB,YAAAK,EAAqB,GAIhC,EClBAC,EAAA,CAAA,CAAwB,SAAAC,EACtB,MAAAC,EACA,WAAAX,EACA,MAAAC,EAAA,EACQ,GAAAW,CAEV,IAAA,CACE,MAAAC,EAAAC,EAAA,QAAY,IAAAf,EAAAC,EAAAC,CAAA,EAC4B,CAAAD,EAAAC,CAAA,CACpB,EAGpB,OAAAc,EACEpB,EAAC,CAAA,iCAAA,GACiC,SAAAe,EAChC,OAAA,CAAA,IAAAG,CAAA,EACY,MAAAF,EACZ,GAAAC,CACI,CAAA,CAGV,EAEOI,EAAA,CAAA,CAAe,YAAAC,EAAA,OACN,SAAAP,EACd,OAAAQ,EACA,GAAAN,CAEF,IAAA,CACE,KAAA,CAAA,OAAAO,EAAA,MAAAC,CAAA,EAAAC,IACA,CAAApB,EAAAqB,CAAA,EAAAC,EAAAA,SAAA,MAAA,EAEAC,EAAAV,EAAA,QAAsB,IAAAW,EAAAR,EAAAhB,CAAA,EACiB,CAAAgB,EAAAhB,CAAA,CAClB,EAErByB,EAAAC,EAAAH,CAAA,EAEAI,EAAAA,UAAA,IAAA,CAEEN,EAAA,MAAA,CAAkB,EAAA,CAAAH,EAAAC,CAAA,CAAA,EAGpB,MAAAS,EAAAC,EAAA,YAAuBC,GAAA,CAEnBT,EAAAS,EAAA,YAAA,OAAA,KAAA,EACArB,GAAA,MAAAA,EAAAqB,EAAgB,EAClB,CAAArB,EAAAY,CAAA,CACmB,EAKrB,OAAAU,EAAA,KAAA,OAAA,OAAAd,GAAA,SACEH,EACEN,EAAC,CAAA,SAAAoB,EACW,MAAA,CAAAH,EAAA,KAAA,EACU,WAAAR,EACR,MAAAjB,EACZ,GAAAW,CACI,CAAA,EAKVG,EACEkB,EAAC,CAAA,iCAAA,GACiC,SAAAJ,EACtB,OAAAX,EACV,MAAA,CAAAQ,EAAA,KAAA,EACoB,GAAAd,CAChB,CAAA,CAGV,EAEAa,EAAA,CAAAR,EAAAhB,IAAA,CAAA,CAAA,MAAAiC,CAAA,IAAA,CAGI,MAAAC,EAAAD,EAAA,YAAAjB,CAAA,EAEA,OAAAmB,EAAA,OAAA,CAAyB,MAAA,CAChB,MAAA,OACE,SAAA,OACG,OAAAJ,EAAA,KAAA,WAAA/B,GAAAkC,EAAA,EAAAlC,EAAAkC,EAAA,OAIJ,KAAA,EACA,YAAAA,EACO,WAAA,OACD,CACd,CAAA,CAEJ,+RC9HF,MAAejB,EAAA,GAAA,IAAA,IAAA,wCAAA,YAAA,GAAA,EAAA;;;;;"}