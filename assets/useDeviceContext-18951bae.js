import{r as c}from"./index-76fb7be0.js";import{j as O}from"./useThemable-f30bc085.js";import{N as v}from"./NativeEventEmitter-e48f6778.js";import{N as g}from"./index-fca5dbaa.js";import{a as x}from"./_commonjsHelpers-de833af9.js";import{P as a}from"./index-9f48cdb1.js";import{u as _}from"./index-b6575df8.js";new v(g.RNDeviceInfo);const u=new v(g.RNDeviceInfo);let l=!1,y=-1,s={};const f=e=>{const{level:t,charging:o,chargingtime:n,dischargingtime:r}=e;return{batteryLevel:t,lowPowerMode:!1,batteryState:t===1?"full":o?"charging":"unplugged",chargingtime:n,dischargingtime:r}},h=()=>window.performance&&window.performance.memory?window.performance.memory.jsHeapSizeLimit:-1,w=()=>document.referrer,S=()=>!!navigator.onLine,D=()=>window.navigator.userAgent,P=()=>!!navigator.geolocation,I=()=>navigator.deviceMemory?navigator.deviceMemory*1e9:-1,M=()=>window.performance&&window.performance.memory?window.performance.memory.usedJSHeapSize:-1,B=()=>{typeof navigator>"u"||!navigator.getBattery||navigator.getBattery().then(e=>{l=e.charging,e.addEventListener("chargingchange",()=>{const{charging:t}=e;l=t,s=f(e),u.emit("RNDeviceInfo_powerStateDidChange",s)}),e.addEventListener("levelchange",()=>{const{level:t}=e;y=t,s=f(e),u.emit("RNDeviceInfo_batteryLevelDidChange",t),t<.2&&u.emit("RNDeviceInfo_batteryLevelIsLow",t)})})},R=()=>{const e=window.navigator.userAgent,t=window.navigator.platform,o=["Macintosh","MacIntel","MacPPC","Mac68K"],n=["Win32","Win64","Windows","WinCE"],r=["iPhone","iPad","iPod"];let i=t;return o.indexOf(t)!==-1?i="Mac OS":r.indexOf(t)!==-1?i="iOS":n.indexOf(t)!==-1?i="Windows":/Android/.test(e)?i="Android":!i&&/Linux/.test(t)&&(i="Linux"),i};B();const T=async()=>w(),E=async()=>D(),k=async()=>navigator.getBattery?navigator.getBattery().then(e=>e.charging):!1,A=()=>l,j=async()=>navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices().then(e=>!!e.find(t=>t.kind==="videoinput")):!1,F=()=>(console.log("[react-native-device-info] isCameraPresentSync not supported - please use isCameraPresent"),!1),W=async()=>navigator.getBattery?navigator.getBattery().then(e=>e.level):-1,U=()=>y,q=async()=>P(),V=async()=>S(),z=async()=>R(),$=async()=>navigator.storage&&navigator.storage.estimate?navigator.storage.estimate().then(({quota:e})=>e):-1,H=()=>(console.log("[react-native-device-info] getTotalDiskCapacitySync not supported - please use getTotalDiskCapacity"),-1),G=async()=>navigator.storage&&navigator.storage.estimate?navigator.storage.estimate().then(({quota:e,usage:t})=>e-t):-1,J=()=>(console.log("[react-native-device-info] getFreeDiskStorageSync not supported - please use getFreeDiskStorage"),-1),X=async()=>h(),Y=async()=>M(),Q=async()=>I(),Z=async()=>navigator.getBattery?navigator.getBattery().then(e=>f(e)):{},K=()=>s,ee=Object.freeze(Object.defineProperty({__proto__:null,getBaseOs:z,getBatteryLevel:W,getBatteryLevelSync:U,getFreeDiskStorage:G,getFreeDiskStorageSync:J,getInstallReferrer:T,getInstallReferrerSync:w,getMaxMemory:X,getMaxMemorySync:h,getPowerState:Z,getPowerStateSync:K,getTotalDiskCapacity:$,getTotalDiskCapacitySync:H,getTotalMemory:Q,getTotalMemorySync:I,getUsedMemory:Y,getUsedMemorySync:M,getUserAgent:E,getUserAgentSync:D,isAirplaneMode:V,isAirplaneModeSync:S,isBatteryCharging:k,isBatteryChargingSync:A,isCameraPresent:j,isCameraPresentSync:F,isLocationEnabled:q,isLocationEnabledSync:P},Symbol.toStringTag,{value:"Module"})),te=x(ee);let m=g.RNDeviceInfo;(a.OS==="web"||a.OS==="dom")&&(m=te);if(!m&&(a.OS==="android"||a.OS==="ios"||a.OS==="web"||a.OS==="dom"))throw new Error("react-native-device-info: NativeModule.RNDeviceInfo is null. To fix this issue try these steps:\n  • For react-native <= 0.59: Run `react-native link react-native-device-info` in the project root.\n  • Rebuild and re-run the app.\n  • If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n  If none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-device-info/react-native-device-info");const C=m;let d={};function ne(e,t,o){let n={};return e.filter(r=>a.OS==r).forEach(r=>n[r]=t),a.select({...n,default:o})}function N({getter:e,supportedPlatforms:t,defaultValue:o,memoKey:n}){if(n&&d[n]!=null)return d[n];{const r=ne(t,e,()=>o)();return n&&(d[n]=r),r}}const de=()=>N({defaultValue:"unknown",memoKey:"uniqueId",supportedPlatforms:["android","ios","windows"],getter:()=>C.uniqueId}),re=()=>N({defaultValue:!1,supportedPlatforms:["android","ios","windows"],memoKey:"tablet",getter:()=>C.isTablet});new v(g.RNDeviceInfo);const b={fontScale:1,height:640,isLandscape:!1,isPortrait:!0,isTablet:!1,isTallPhone:!0,scale:1,width:360},L=c.createContext(b),p=({children:e})=>{const[t,o]=c.useState(b),n=_();return c.useEffect(()=>{o({isLandscape:n.height<n.width,isPortrait:n.height>=n.width,isTablet:re(),isTallPhone:n.height/n.width>2,...n})},[n]),O(L.Provider,{value:t,children:e})};try{p.displayName="DeviceProvider",p.__docgenInfo={description:"",displayName:"DeviceProvider",props:{}}}catch{}const le=()=>c.useContext(L);export{p as D,de as g,le as u};
