{"version":3,"file":"useSentry-838bc996.js","sources":["../../src/hooks/sentry/useSentry.ts"],"sourcesContent":["import {useMemo} from 'react'\nimport {\n  getCaptureSentryBreadcrumb,\n  getSendSentryErrorLog,\n} from '@/processes/sentry'\nimport {SentryHandler} from '@/types/sentry'\n\n/**\n * Get logging and breadcrumb functions. If we call useSentry with dangerouslyOverrideConsent, we can log before the consent settings are initialized or indeed without consent.\n * In this case, we log the message and category or filename by default and the additional data only if dangerouslyLogAdditionalDataAnyway is true.\n * Note: only use this if you HAVE TO and make sure you're not sending any personal data!\n */\nexport const useSentry = (\n  dangerouslyOverrideConsent = false,\n  dangerouslyLogAdditionalDataAnyway = false,\n): SentryHandler => {\n  // TODO When we implement the consent feature (user data usage), we can get this from the Redux state and disable Sentry features depending on that setting.\n  const consent = true\n\n  return useMemo(() => {\n    if (consent || dangerouslyOverrideConsent) {\n      return {\n        captureSentryBreadcrumb: getCaptureSentryBreadcrumb(\n          consent || dangerouslyLogAdditionalDataAnyway,\n        ),\n        sendSentryErrorLog: getSendSentryErrorLog(\n          consent || dangerouslyLogAdditionalDataAnyway,\n        ),\n      }\n    }\n\n    return {\n      captureSentryBreadcrumb: () => null,\n      sendSentryErrorLog: () => null,\n    }\n  }, [consent, dangerouslyOverrideConsent, dangerouslyLogAdditionalDataAnyway])\n}\n"],"names":["useSentry","dangerouslyOverrideConsent","dangerouslyLogAdditionalDataAnyway","useMemo","getCaptureSentryBreadcrumb","getSendSentryErrorLog"],"mappings":"wFAYO,MAAMA,EAAY,CACvBC,EAA6B,GAC7BC,EAAqC,KAK9BC,UAAQ,KAEJ,CACL,wBAAyBC,EAEzB,EACA,mBAAoBC,EAEpB,CAAA,GAQH,CAAC,GAASJ,EAA4BC,CAAkC,CAAC"}