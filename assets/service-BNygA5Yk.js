import{b as k,c as a}from"./types-D1Nyax9S.js";import{M as r}from"./useTrackException-TkLtIDfC.js";import{g as T,S as u,a as h,b as y,c as v,d as g,e as d,C as l}from"./api-CpTDNFl2.js";import{d as S,a as p}from"./development-DJtR3hZp.js";const A=async s=>{try{const e=await T(s===k.permitHolder?u.parkingPermitHolder:u.parkingVisitor);return e?JSON.parse(e):void 0}catch(e){return S(e),Promise.reject(e)}},q=async s=>{try{return await h(s.scope===k.permitHolder?u.parkingPermitHolder:u.parkingVisitor,JSON.stringify(s))}catch(e){return e}},E=(s,e,n,o,i)=>{q(s).then(()=>{e(y(s.scope===k.permitHolder?u.parkingPermitHolder:u.parkingVisitor)),S("Token parking account successful refreshed"),n("New token, so old request should fail"),o()},()=>{p("Token parking account save failed"),i(new Error("New token could not be saved"))})},f=(s,e,n)=>new Promise((o,i)=>{if(!s){p("No account type provided"),i(new Error("No account type provided  "));return}A(s).then(c=>{c&&e(m.endpoints[a.login].initiate({pin:c.pin,report_code:c.reportCode})).unwrap().then(({access_token:P})=>E({...c,accessToken:P},e,n,o,i),()=>{p("Token refresh failed, you are now logged out"),n("Session ended"),i(new Error("Token refresh failed"))})})}),t=async({error:s},{dispatch:e,getState:n},o)=>{if((s==null?void 0:s.status)===403){const{currentAccountType:i}=n().parking;return f(i,e,o)}else o("no access")},m=v.injectEndpoints({endpoints:s=>({[a.accountDetails]:s.query({providesTags:["ParkingAccount"],query:e=>({headers:{"SSP-Access-Token":e},method:"GET",slug:r.parking,url:"/account-details",afterError:t})}),[a.addLicensePlate]:s.mutation({invalidatesTags:["ParkingLicensePlates"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},body:n,method:"POST",slug:r.parking,url:"/license-plate",afterError:t})}),[a.licensePlates]:s.query({providesTags:["ParkingLicensePlates"],query:({accessToken:e,reportCode:n})=>({headers:{"SSP-Access-Token":e},method:"GET",params:{report_code:n},slug:r.parking,url:"/license-plates",afterError:t})}),[a.login]:s.mutation({query:e=>({body:e,method:"POST",slug:r.parking,url:"/login"})}),[a.parkingSessions]:s.query({providesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"GET",params:n,slug:r.parking,url:"/sessions",afterError:t}),keepUnusedDataFor:l.hour}),[a.parkingTransactions]:s.query({providesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"GET",params:n,slug:r.parking,url:"/transactions",afterError:t}),keepUnusedDataFor:l.hour}),[a.permits]:s.query({query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"GET",slug:r.parking,url:g({path:"/permits",params:n}),afterError:t})}),[a.sessionReceipt]:s.query({query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"GET",slug:r.parking,url:g({path:"/session/receipt",params:n}),afterError:t})}),[a.startSession]:s.mutation({invalidatesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e,...d},body:n,method:"POST",slug:r.parking,url:"/session",afterError:t})}),[a.editSession]:s.mutation({invalidatesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e,...d},body:n,method:"PATCH",slug:r.parking,url:"/session",afterError:t})}),[a.deleteSession]:s.mutation({invalidatesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e,...d},method:"DELETE",slug:r.parking,url:g({path:"/session",params:n}),afterError:t})}),[a.removeLicensePlate]:s.mutation({invalidatesTags:["ParkingLicensePlates"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"DELETE",slug:r.parking,url:g({path:"/license-plate",params:n}),afterError:t})}),[a.increaseBalance]:s.mutation({invalidatesTags:["ParkingAccount"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},body:n,method:"POST",slug:r.parking,url:"/balance",afterError:t})})}),overrideExisting:!0}),{useAccountDetailsQuery:D,useAddLicensePlateMutation:N,useLicensePlatesQuery:G,useLoginMutation:I,useParkingSessionsQuery:O,useParkingTransactionsQuery:Q,useRemoveLicensePlateMutation:C,usePermitsQuery:U,useSessionReceiptQuery:V,useStartSessionMutation:x,useEditSessionMutation:B,useDeleteSessionMutation:F,useIncreaseBalanceMutation:J}=m;export{N as a,I as b,O as u};
