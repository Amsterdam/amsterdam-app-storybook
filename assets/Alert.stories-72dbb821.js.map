{"version":3,"file":"Alert.stories-72dbb821.js","sources":["../../src/components/ui/feedback/Alert.types.ts","../../node_modules/@react-navigation/core/lib/module/useNavigation.js","../../src/hooks/navigation/useNavigation.ts","../../src/hooks/navigation/useBeforeRemove.ts","../../src/hooks/redux/useDispatch.ts","../../src/components/ui/feedback/Alert.tsx"],"sourcesContent":["import {IconName} from '@/components/ui/media/iconPaths'\n\nexport enum AlertCloseType {\n  withButton = 'withButton',\n  withoutButton = 'withoutButton',\n}\n\nexport enum AlertVariant {\n  information = 'information',\n  negative = 'negative',\n  positive = 'positive',\n}\n\nexport type AlertVariantConfig = {\n  [v in AlertVariant]: {\n    backgroundColor: string\n    borderColor: string\n    borderWidth: number\n    iconName: IconName\n  }\n}\n","import * as React from 'react';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\n/**\n * Hook to access the navigation prop of the parent screen anywhere.\n *\n * @returns Navigation prop of the parent screen.\n */\nexport default function useNavigation() {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationContext);\n  if (navigation === undefined && root === undefined) {\n    throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n  }\n\n  // FIXME: Figure out a better way to do this\n  return navigation ?? root;\n}\n//# sourceMappingURL=useNavigation.js.map","// eslint-disable-next-line no-restricted-imports\nimport {useNavigation as useNavigationOriginal} from '@react-navigation/native'\nimport {NavigationProp, RootStackParams} from '@/app/navigation/types'\n\nexport const useNavigation = <RouteName extends keyof RootStackParams>() =>\n  useNavigationOriginal<NavigationProp<RouteName>>()\n","import {useEffect} from 'react'\nimport {useNavigation} from '@/hooks/navigation/useNavigation'\n\n/**\n * Do something, e.g. a clean up action, when the user navigates to another screen.\n */\nexport const useBeforeRemove = (callback: () => unknown) => {\n  const navigation = useNavigation()\n\n  useEffect(\n    () => navigation.addListener('beforeRemove', callback),\n    [callback, navigation],\n  )\n}\n","import {useDispatch as useDispatchOriginal} from 'react-redux'\nimport {store} from '@/store/store'\n\nexport const useDispatch = () => useDispatchOriginal<typeof store.dispatch>()\n","import {FC, Fragment, ReactNode, useCallback, useEffect} from 'react'\nimport {\n  AccessibilityInfo,\n  LayoutAnimation,\n  Platform,\n  Pressable,\n  StyleSheet,\n  UIManager,\n  View,\n} from 'react-native'\nimport {IconButton} from '@/components/ui/buttons/IconButton'\nimport {Box} from '@/components/ui/containers/Box'\nimport {SingleSelectable} from '@/components/ui/containers/SingleSelectable'\nimport {\n  AlertCloseType,\n  AlertVariant,\n  AlertVariantConfig,\n} from '@/components/ui/feedback/Alert.types'\nimport {Column} from '@/components/ui/layout/Column'\nimport {Row} from '@/components/ui/layout/Row'\nimport {Icon} from '@/components/ui/media/Icon'\nimport {Paragraph} from '@/components/ui/text/Paragraph'\nimport {Title} from '@/components/ui/text/Title'\nimport {useBeforeRemove} from '@/hooks/navigation/useBeforeRemove'\nimport {useDispatch} from '@/hooks/redux/useDispatch'\nimport {useSelector} from '@/hooks/redux/useSelector'\nimport {useIsReduceMotionEnabled} from '@/hooks/useIsReduceMotionEnabled'\nimport {resetAlert, selectAlert} from '@/store/slices/alert'\nimport {Theme} from '@/themes/themes'\nimport {useThemable} from '@/themes/useThemable'\nimport {accessibleText} from '@/utils/accessibility/accessibleText'\n\nif (\n  Platform.OS === 'android' &&\n  UIManager.setLayoutAnimationEnabledExperimental\n) {\n  UIManager.setLayoutAnimationEnabledExperimental(true)\n}\n\nexport const Alert = () => {\n  const dispatch = useDispatch()\n  const isReduceMotionEnabled = useIsReduceMotionEnabled()\n\n  const alert = useSelector(selectAlert)\n  const {closeType, content, testID, variant, withIcon} = alert\n  const variantConfig = useThemable(createVariantConfig)\n  const iconName = variantConfig[variant ?? AlertVariant.information].iconName\n\n  const styles = useThemable(createStyles(variant, variantConfig))\n\n  const reset = useCallback(() => dispatch(resetAlert()), [dispatch])\n\n  useBeforeRemove(reset)\n\n  useEffect(() => {\n    reset() // triggers when navigation navigates to new screen\n  }, [reset])\n\n  useEffect(() => {\n    if (content) {\n      AccessibilityInfo.announceForAccessibility(\n        accessibleText(content.title, content.text),\n      )\n    }\n  }, [content])\n\n  if (!alert.content) {\n    return null\n  }\n\n  const WrapperComponent: FC<{children: ReactNode}> =\n    closeType === AlertCloseType.withoutButton\n      ? props => (\n          <Pressable\n            accessibilityRole=\"button\"\n            onPress={() => {\n              if (!isReduceMotionEnabled) {\n                LayoutAnimation.configureNext(\n                  LayoutAnimation.Presets.easeInEaseOut,\n                )\n              }\n\n              dispatch(resetAlert())\n            }}\n            {...props}\n          />\n        )\n      : Fragment\n\n  return (\n    <WrapperComponent>\n      <Box>\n        <View\n          style={styles?.view}\n          testID={testID}>\n          <Row align=\"between\">\n            <SingleSelectable\n              accessibilityLabel={accessibleText(content?.title, content?.text)}\n              accessibilityRole=\"alert\">\n              <Row gutter=\"md\">\n                {!!withIcon && (\n                  <Icon\n                    color=\"link\"\n                    name={iconName}\n                    size=\"lg\"\n                  />\n                )}\n                <Column>\n                  {!!content?.title && (\n                    <Title\n                      level=\"h4\"\n                      text={content?.title}\n                    />\n                  )}\n                  <Paragraph>{content?.text}</Paragraph>\n                </Column>\n              </Row>\n            </SingleSelectable>\n            {closeType === AlertCloseType.withButton && (\n              <View>\n                <IconButton\n                  accessibilityHint=\"Sluit melding\"\n                  icon={\n                    <Icon\n                      color=\"link\"\n                      name=\"close\"\n                      size=\"lg\"\n                    />\n                  }\n                  onPress={() => dispatch(resetAlert())}\n                />\n              </View>\n            )}\n          </Row>\n        </View>\n      </Box>\n    </WrapperComponent>\n  )\n}\n\nconst createStyles =\n  (variant: AlertVariant, variantConfig: AlertVariantConfig) =>\n  ({size}: Theme) => {\n    if (!variant) {\n      return\n    }\n\n    const {backgroundColor, borderColor, borderWidth} = variantConfig[variant]\n\n    return StyleSheet.create({\n      view: {\n        backgroundColor,\n        borderWidth,\n        borderColor,\n        paddingHorizontal: size.spacing.lg,\n        paddingVertical: size.spacing.md,\n      },\n    })\n  }\n\nconst createVariantConfig = ({color}: Theme): AlertVariantConfig => ({\n  [AlertVariant.information]: {\n    backgroundColor: color.box.background.alert,\n    borderColor: color.box.background.alert,\n    borderWidth: 2,\n    iconName: 'alert',\n  },\n  [AlertVariant.negative]: {\n    backgroundColor: color.box.background.white,\n    borderColor: color.severity.negative,\n    borderWidth: 2,\n    iconName: 'alert',\n  },\n  [AlertVariant.positive]: {\n    backgroundColor: color.box.background.white,\n    borderColor: color.severity.positive,\n    borderWidth: 2,\n    iconName: 'checkmark',\n  },\n})\n"],"names":["AlertCloseType","AlertVariant","useNavigation","root","React.useContext","NavigationContainerRefContext","navigation","NavigationContext","useNavigationOriginal","useBeforeRemove","callback","useEffect","useDispatch","useDispatchOriginal","Platform","UIManager","Alert","dispatch","isReduceMotionEnabled","useIsReduceMotionEnabled","alert","useSelector","selectAlert","closeType","content","testID","variant","withIcon","variantConfig","useThemable","createVariantConfig","iconName","styles","createStyles","reset","useCallback","resetAlert","AccessibilityInfo","accessibleText","WrapperComponent","props","jsx","Pressable","LayoutAnimation","Fragment","Box","View","jsxs","Row","SingleSelectable","Icon","Column","Title","Paragraph","IconButton","size","backgroundColor","borderColor","borderWidth","StyleSheet","color"],"mappings":"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","x_google_ignoreList":[1]}