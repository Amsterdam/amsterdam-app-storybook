{"version":3,"file":"Button-8bf85326.js","sources":["../../src/components/ui/buttons/Button.tsx"],"sourcesContent":["import {useCallback, useState} from 'react'\nimport {\n  GestureResponderEvent,\n  Pressable,\n  PressableProps,\n  StyleSheet,\n  Text,\n} from 'react-native'\nimport {config} from '@/components/ui/config'\nimport {Row} from '@/components/ui/layout/Row'\nimport {Icon} from '@/components/ui/media/Icon'\nimport {IconName} from '@/components/ui/media/iconPaths'\nimport {Theme} from '@/themes/themes'\nimport {useThemable} from '@/themes/useThemable'\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary'\n\nexport type ButtonProps = {\n  ellipsizeMode?: 'head' | 'tail' | 'middle' | 'clip'\n  iconName?: IconName\n  label?: string\n  numberOfLines?: number\n  small?: boolean\n  variant?: ButtonVariant\n} & Omit<PressableProps, 'style'>\n\nexport const Button = ({\n  ellipsizeMode,\n  iconName,\n  label,\n  numberOfLines,\n  small,\n  testID,\n  variant = 'primary',\n  ...pressableProps\n}: ButtonProps) => {\n  const [isPressed, setIsPressed] = useState(false)\n  const styles = useThemable(createStyles({small, variant}, isPressed))\n  const {onPressIn, onPressOut} = pressableProps\n\n  const mergeOnPressIn = useCallback(\n    (e: GestureResponderEvent) => {\n      setIsPressed(true)\n      onPressIn?.(e)\n    },\n    [onPressIn],\n  )\n\n  const mergeOnPressOut = useCallback(\n    (e: GestureResponderEvent) => {\n      setIsPressed(false)\n      onPressOut?.(e)\n    },\n    [onPressOut],\n  )\n\n  return (\n    <Pressable\n      accessibilityLanguage=\"nl-NL\"\n      accessibilityRole=\"button\"\n      onPressIn={mergeOnPressIn}\n      onPressOut={mergeOnPressOut}\n      style={styles.button}\n      testID={testID}\n      {...pressableProps}>\n      <Row\n        gutter=\"sm\"\n        valign=\"center\">\n        {!!iconName && (\n          <Icon\n            color={variant === 'primary' ? 'inverse' : 'link'}\n            name={iconName}\n            size=\"lg\"\n            testID={testID ? `${testID}Icon` : undefined}\n          />\n        )}\n        {!!label && (\n          <Text\n            ellipsizeMode={ellipsizeMode}\n            numberOfLines={numberOfLines}\n            style={styles.label}\n            testID={testID ? `${testID}Label` : undefined}>\n            {label}\n          </Text>\n        )}\n      </Row>\n    </Pressable>\n  )\n}\n\nconst getBorderColor = (\n  color: Theme['color'],\n  pressed: boolean,\n  variant: ButtonProps['variant'],\n) => {\n  if (variant === 'primary') {\n    return 'transparent'\n  }\n\n  if (variant === 'secondary') {\n    return pressed\n      ? color.pressable.primary.highlight\n      : color.pressable.primary.default\n  }\n\n  if (variant === 'tertiary') {\n    return pressed ? color.pressable.pressed.background : 'transparent'\n  }\n}\n\nconst getLabelColor = (\n  color: Theme['color'],\n  pressed: boolean,\n  variant: ButtonProps['variant'],\n) => {\n  if (variant === 'primary') {\n    return color.text.inverse\n  }\n\n  return pressed\n    ? color.pressable.primary.highlight\n    : color.pressable.primary.default\n}\n\nconst getBackgroundColor = (\n  color: Theme['color'],\n  pressed: boolean,\n  variant: ButtonProps['variant'],\n) => {\n  if (variant === 'primary') {\n    return pressed\n      ? color.pressable.primary.highlight\n      : color.pressable.primary.default\n  }\n\n  return color.box.background.white\n}\n\n// TODO Improve color tokens\nconst createStyles =\n  ({small, variant}: Partial<ButtonProps>, pressed: boolean) =>\n  ({border, color, text, size}: Theme) => {\n    const buttonHeight = config.buttonHeight\n    const borderWidth =\n      border.width[variant === 'secondary' && pressed ? 'lg' : 'md']\n    const labelFontSize = text.fontSize[small ? 'small' : 'body']\n    const labelLineHeight = text.lineHeight[small ? 'small' : 'body']\n\n    const paddingHorizontal =\n      size.spacing.md + 2 + border.width.md - borderWidth\n\n    const paddingVertical =\n      (buttonHeight - labelLineHeight - 2 * borderWidth) / 2\n\n    return StyleSheet.create({\n      button: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        flexShrink: 1,\n        paddingHorizontal,\n        paddingVertical,\n        backgroundColor: getBackgroundColor(color, pressed, variant),\n        borderColor: getBorderColor(color, pressed, variant),\n        borderStyle: 'solid',\n        borderWidth,\n      },\n      // TODO Use `Phrase` instead, after merging line height branch\n      label: {\n        flexShrink: 1,\n        color: getLabelColor(color, pressed, variant),\n        fontFamily: text.fontFamily.regular,\n        fontSize: labelFontSize,\n        lineHeight: labelLineHeight,\n      },\n    })\n  }\n"],"names":["Button","ellipsizeMode","iconName","label","numberOfLines","small","testID","variant","pressableProps","isPressed","setIsPressed","useState","styles","useThemable","createStyles","onPressIn","onPressOut","mergeOnPressIn","useCallback","e","mergeOnPressOut","jsx","Pressable","jsxs","Row","Icon","Text","getBorderColor","color","pressed","getLabelColor","getBackgroundColor","border","text","size","buttonHeight","config","borderWidth","labelFontSize","labelLineHeight","paddingHorizontal","paddingVertical","StyleSheet"],"mappings":"4SA0BO,MAAAA,EAAA,CAAA,CAAgB,cAAAC,EACrB,SAAAC,EACA,MAAAC,EACA,cAAAC,EACA,MAAAC,EACA,OAAAC,EACA,QAAAC,EAAA,UACU,GAAAC,CAEZ,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,EAAAC,EAAA,CAAA,MAAAT,EAAA,QAAAE,CAAA,EAAAE,CAAA,CAAA,EACA,CAAA,UAAAM,EAAA,WAAAC,CAAA,EAAAR,EAEAS,EAAAC,EAAA,YAAuBC,GAAA,CAEnBT,EAAA,EAAA,EACAK,GAAA,MAAAA,EAAAI,EAAa,EACf,CAAAJ,CAAA,CACU,EAGZK,EAAAF,EAAA,YAAwBC,GAAA,CAEpBT,EAAA,EAAA,EACAM,GAAA,MAAAA,EAAAG,EAAc,EAChB,CAAAH,CAAA,CACW,EAGb,OAAAK,EACEC,EAAC,CAAA,sBAAA,QACuB,kBAAA,SACJ,UAAAL,EACP,WAAAG,EACC,MAAAR,EAAA,OACE,OAAAN,EACd,GAAAE,EACI,SAAAe,EACJC,EAAC,CAAA,OAAA,KACQ,OAAA,SACA,SAAA,CACN,CAAA,CAAAtB,GAAAmB,EACCI,EAAC,CAAA,MAAAlB,IAAA,UAAA,UAAA,OAC4C,KAAAL,EACrC,KAAA,KACD,OAAAI,EAAA,GAAAA,CAAA,OAAA,MAC8B,CAAA,EACrC,CAAA,CAAAH,GAAAkB,EAGAK,EAAC,CAAA,cAAAzB,EACC,cAAAG,EACA,MAAAQ,EAAA,MACc,OAAAN,EAAA,GAAAA,CAAA,QAAA,OACsB,SAAAH,CACnC,CAAA,CACH,CAAA,CAAA,CAEJ,CAAA,CAGN,EAEAwB,EAAA,CAAAC,EAAAC,EAAAtB,IAAA,CAKE,GAAAA,IAAA,UACE,MAAA,cAGF,GAAAA,IAAA,YACE,OAAAsB,EAAAD,EAAA,UAAA,QAAA,UAAAA,EAAA,UAAA,QAAA,QAKF,GAAArB,IAAA,WACE,OAAAsB,EAAAD,EAAA,UAAA,QAAA,WAAA,aAEJ,EAEAE,EAAA,CAAAF,EAAAC,EAAAtB,IAKEA,IAAA,UACEqB,EAAA,KAAA,QAGFC,EAAAD,EAAA,UAAA,QAAA,UAAAA,EAAA,UAAA,QAAA,QAKFG,EAAA,CAAAH,EAAAC,EAAAtB,IAKEA,IAAA,UACEsB,EAAAD,EAAA,UAAA,QAAA,UAAAA,EAAA,UAAA,QAAA,QAKFA,EAAA,IAAA,WAAA,MAIFd,EAAA,CAAA,CAAA,MAAAT,EAAA,QAAAE,GAAAsB,IAAA,CAAA,CAAA,OAAAG,EAAA,MAAAJ,EAAA,KAAAK,EAAA,KAAAC,CAAA,IAAA,CAGI,MAAAC,EAAAC,EAAA,aACAC,EAAAL,EAAA,MAAAzB,IAAA,aAAAsB,EAAA,KAAA,IAAA,EAEAS,EAAAL,EAAA,SAAA5B,EAAA,QAAA,MAAA,EACAkC,EAAAN,EAAA,WAAA5B,EAAA,QAAA,MAAA,EAEAmC,EAAAN,EAAA,QAAA,GAAA,EAAAF,EAAA,MAAA,GAAAK,EAGAI,GAAAN,EAAAI,EAAA,EAAAF,GAAA,EAGA,OAAAK,EAAA,OAAA,CAAyB,OAAA,CACf,cAAA,MACS,eAAA,SACC,WAAA,EACJ,kBAAAF,EACZ,gBAAAC,EACA,gBAAAV,EAAAH,EAAAC,EAAAtB,CAAA,EAC2D,YAAAoB,EAAAC,EAAAC,EAAAtB,CAAA,EACR,YAAA,QACtC,YAAA8B,CACb,EACF,MAAA,CAEO,WAAA,EACO,MAAAP,EAAAF,EAAAC,EAAAtB,CAAA,EACgC,WAAA0B,EAAA,WAAA,QAChB,SAAAK,EAClB,WAAAC,CACE,CACd,CAAA,CAEJ"}