{"version":3,"file":"index-3ef41323.js","sources":["../../node_modules/react-native-web/dist/vendor/react-native/vendor/emitter/EventEmitter.js","../../node_modules/react-native-web/dist/vendor/react-native/EventEmitter/RCTDeviceEventEmitter.js","../../node_modules/react-native-web/dist/vendor/react-native/EventEmitter/NativeEventEmitter.js","../../node_modules/react-native-device-info/lib/module/internal/asyncHookWrappers.js","../../node_modules/react-native-device-info/lib/module/web/index.js","../../node_modules/react-native-device-info/lib/module/internal/nativeInterface.js","../../node_modules/react-native-device-info/lib/module/internal/supported-platform-info.js","../../node_modules/react-native-device-info/lib/module/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter {\n  constructor() {\n    this._registry = {};\n  }\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener(eventType, listener, context) {\n    var registrations = allocate(this._registry, eventType);\n    var registration = {\n      context,\n      listener,\n      remove() {\n        registrations.delete(registration);\n      }\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit(eventType) {\n    var registrations = this._registry[eventType];\n    if (registrations != null) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _arr = [...registrations]; _i < _arr.length; _i++) {\n        var registration = _arr[_i];\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners(eventType) {\n    if (eventType == null) {\n      this._registry = {};\n    } else {\n      delete this._registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount(eventType) {\n    var registrations = this._registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\nfunction allocate(registry, eventType) {\n  var registrations = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nexport default new EventEmitter();","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter {\n  constructor(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n  addListener(eventType, listener, context) {\n    var _this$_nativeModule;\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: () => {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n          (_this$_nativeModule2 = this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n          // $FlowFixMe[incompatible-use]\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n    // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  }\n  emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n  removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n  listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}","import { useState, useEffect } from 'react';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount(asyncGetter, initialResult) {\n  const [response, setResponse] = useState({\n    loading: true,\n    result: initialResult\n  });\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({\n        loading: false,\n        result\n      });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n  return response;\n}\nexport const deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n/**\n * simple hook wrapper for handling events\n * @param eventName\n * @param initialValueAsyncGetter\n * @param defaultValue\n */\n\nexport function useOnEvent(eventName, initialValueAsyncGetter, defaultValue) {\n  const {\n    loading,\n    result: initialResult\n  } = useOnMount(initialValueAsyncGetter, defaultValue);\n  const [result, setResult] = useState(defaultValue); // sets the result to what the intial value is on mount\n\n  useEffect(() => {\n    setResult(initialResult);\n  }, [initialResult]); // - set up the event listener to set the result\n  // - set up the clean up function to remove subscription on unmount\n\n  useEffect(() => {\n    const subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return () => subscription.remove();\n  }, [eventName]); // loading will only be true while getting the inital value. After that, it will always be false, but a new result may occur\n\n  return {\n    loading,\n    result\n  };\n}\n//# sourceMappingURL=asyncHookWrappers.js.map","import { NativeEventEmitter, NativeModules } from 'react-native';\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nlet batteryCharging = false,\n    batteryLevel = -1,\n    powerState = {};\n\nconst _readPowerState = battery => {\n  const {\n    level,\n    charging,\n    chargingtime,\n    dischargingtime\n  } = battery;\n  return {\n    batteryLevel: level,\n    lowPowerMode: false,\n    batteryState: level === 1 ? 'full' : charging ? 'charging' : 'unplugged',\n    chargingtime,\n    dischargingtime\n  };\n};\n\nexport const getMaxMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.jsHeapSizeLimit;\n  }\n\n  return -1;\n};\nexport const getInstallReferrerSync = () => {\n  return document.referrer;\n};\nexport const isAirplaneModeSync = () => {\n  return !!navigator.onLine;\n};\nexport const getUserAgentSync = () => {\n  return window.navigator.userAgent;\n};\nexport const isLocationEnabledSync = () => {\n  return !!navigator.geolocation;\n};\nexport const getTotalMemorySync = () => {\n  if (navigator.deviceMemory) {\n    return navigator.deviceMemory * 1000000000;\n  }\n\n  return -1;\n};\nexport const getUsedMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.usedJSHeapSize;\n  }\n\n  return -1;\n};\n\nconst init = () => {\n  if (typeof navigator === 'undefined' || !navigator.getBattery) return;\n  navigator.getBattery().then(battery => {\n    batteryCharging = battery.charging;\n    battery.addEventListener('chargingchange', () => {\n      const {\n        charging\n      } = battery;\n      batteryCharging = charging;\n      powerState = _readPowerState(battery);\n      deviceInfoEmitter.emit('RNDeviceInfo_powerStateDidChange', powerState);\n    });\n    battery.addEventListener('levelchange', () => {\n      const {\n        level\n      } = battery;\n      batteryLevel = level;\n      powerState = _readPowerState(battery);\n      deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelDidChange', level);\n\n      if (level < 0.2) {\n        deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelIsLow', level);\n      }\n    });\n  });\n};\n\nconst getBaseOsSync = () => {\n  const userAgent = window.navigator.userAgent,\n        platform = window.navigator.platform,\n        macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n        windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\n        iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n  let os = platform;\n\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    os = 'Mac OS';\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    os = 'iOS';\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    os = 'Windows';\n  } else if (/Android/.test(userAgent)) {\n    os = 'Android';\n  } else if (!os && /Linux/.test(platform)) {\n    os = 'Linux';\n  }\n\n  return os;\n};\n\ninit();\n/**\n * react-native-web empty polyfill.\n */\n\nexport const getInstallReferrer = async () => {\n  return getInstallReferrerSync();\n};\nexport const getUserAgent = async () => {\n  return getUserAgentSync();\n};\nexport const isBatteryCharging = async () => {\n  if (navigator.getBattery) {\n    return navigator.getBattery().then(battery => battery.charging);\n  }\n\n  return false;\n};\nexport const isBatteryChargingSync = () => {\n  return batteryCharging;\n};\nexport const isCameraPresent = async () => {\n  if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return navigator.mediaDevices.enumerateDevices().then(devices => {\n      return !!devices.find(d => d.kind === 'videoinput');\n    });\n  }\n\n  return false;\n};\nexport const isCameraPresentSync = () => {\n  console.log('[react-native-device-info] isCameraPresentSync not supported - please use isCameraPresent');\n  return false;\n};\nexport const getBatteryLevel = async () => {\n  if (navigator.getBattery) {\n    return navigator.getBattery().then(battery => battery.level);\n  }\n\n  return -1;\n};\nexport const getBatteryLevelSync = () => {\n  return batteryLevel;\n};\nexport const isLocationEnabled = async () => {\n  return isLocationEnabledSync();\n};\nexport const isAirplaneMode = async () => {\n  return isAirplaneModeSync();\n};\nexport const getBaseOs = async () => {\n  return getBaseOsSync();\n};\nexport const getTotalDiskCapacity = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    return navigator.storage.estimate().then(({\n      quota\n    }) => quota);\n  }\n\n  return -1;\n};\nexport const getTotalDiskCapacitySync = () => {\n  console.log('[react-native-device-info] getTotalDiskCapacitySync not supported - please use getTotalDiskCapacity');\n  return -1;\n};\nexport const getFreeDiskStorage = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    return navigator.storage.estimate().then(({\n      quota,\n      usage\n    }) => quota - usage);\n  }\n\n  return -1;\n};\nexport const getFreeDiskStorageSync = () => {\n  console.log('[react-native-device-info] getFreeDiskStorageSync not supported - please use getFreeDiskStorage');\n  return -1;\n};\nexport const getMaxMemory = async () => {\n  return getMaxMemorySync();\n};\nexport const getUsedMemory = async () => {\n  return getUsedMemorySync();\n};\nexport const getTotalMemory = async () => {\n  return getTotalMemorySync();\n};\nexport const getPowerState = async () => {\n  if (navigator.getBattery) {\n    return navigator.getBattery().then(battery => _readPowerState(battery));\n  }\n\n  return {};\n};\nexport const getPowerStateSync = () => {\n  return powerState;\n};\n//# sourceMappingURL=index.js.map","import { Platform, NativeModules } from 'react-native';\nlet RNDeviceInfo = NativeModules.RNDeviceInfo; // @ts-ignore\n\nif (Platform.OS === 'web' || Platform.OS === 'dom') {\n  RNDeviceInfo = require('../web');\n}\n\nif (!RNDeviceInfo) {\n  // Produce an error if we don't have the native module\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web' || // @ts-ignore\n  Platform.OS === 'dom') {\n    throw new Error(`react-native-device-info: NativeModule.RNDeviceInfo is null. To fix this issue try these steps:\n  • For react-native <= 0.59: Run \\`react-native link react-native-device-info\\` in the project root.\n  • Rebuild and re-run the app.\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n  If none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-device-info/react-native-device-info`);\n  }\n}\n\nexport default RNDeviceInfo;\n//# sourceMappingURL=nativeInterface.js.map","import { Platform } from 'react-native';\n// centralized memo object\nlet memo = {};\nexport function clearMemo() {\n  memo = {};\n}\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\n\nfunction getSupportedFunction(supportedPlatforms, getter, defaultGetter) {\n  let supportedMap = {};\n  supportedPlatforms.filter(key => Platform.OS == key).forEach(key => supportedMap[key] = getter);\n  return Platform.select({ ...supportedMap,\n    default: defaultGetter\n  });\n}\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\n\n\nexport function getSupportedPlatformInfoSync({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey\n}) {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\n\nexport async function getSupportedPlatformInfoAsync({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey\n}) {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () => Promise.resolve(defaultValue))();\n\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\n\nexport function getSupportedPlatformInfoFunctions({\n  syncGetter,\n  ...asyncParams\n}) {\n  return [() => getSupportedPlatformInfoAsync(asyncParams), () => getSupportedPlatformInfoSync({ ...asyncParams,\n    getter: syncGetter\n  })];\n}\n//# sourceMappingURL=supported-platform-info.js.map","import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnEvent, useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport { getSupportedPlatformInfoAsync, getSupportedPlatformInfoFunctions, getSupportedPlatformInfoSync } from './internal/supported-platform-info';\nexport const getUniqueId = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  memoKey: 'uniqueId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.uniqueId\n});\nlet uniqueId;\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = getUniqueId();\n  }\n\n  return uniqueId;\n}\nexport const [getInstanceId, getInstanceIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getInstanceId(),\n  syncGetter: () => RNDeviceInfo.getInstanceIdSync(),\n  defaultValue: 'unknown'\n});\nexport const [getSerialNumber, getSerialNumberSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getSerialNumber(),\n  syncGetter: () => RNDeviceInfo.getSerialNumberSync(),\n  defaultValue: 'unknown'\n});\nexport const [getAndroidId, getAndroidIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getAndroidId(),\n  syncGetter: () => RNDeviceInfo.getAndroidIdSync(),\n  defaultValue: 'unknown'\n});\nexport const [getIpAddress, getIpAddressSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getIpAddress(),\n  syncGetter: () => RNDeviceInfo.getIpAddressSync(),\n  defaultValue: 'unknown'\n});\nexport const [isCameraPresent, isCameraPresentSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isCameraPresent(),\n  syncGetter: () => RNDeviceInfo.isCameraPresentSync(),\n  defaultValue: false\n});\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\nexport const getDeviceId = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  memoKey: 'deviceId',\n  getter: () => RNDeviceInfo.deviceId,\n  supportedPlatforms: ['android', 'ios', 'windows']\n});\nexport const [getManufacturer, getManufacturerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => Platform.OS == 'ios' ? Promise.resolve('Apple') : RNDeviceInfo.getSystemManufacturer(),\n  syncGetter: () => Platform.OS == 'ios' ? 'Apple' : RNDeviceInfo.getSystemManufacturerSync(),\n  defaultValue: 'unknown'\n});\nexport const getModel = () => getSupportedPlatformInfoSync({\n  memoKey: 'model',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['ios', 'android', 'windows'],\n  getter: () => RNDeviceInfo.model\n});\nexport const getBrand = () => getSupportedPlatformInfoSync({\n  memoKey: 'brand',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.brand\n});\nexport const getSystemName = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  supportedPlatforms: ['ios', 'android', 'windows'],\n  memoKey: 'systemName',\n  getter: () => Platform.select({\n    ios: RNDeviceInfo.systemName,\n    android: 'Android',\n    windows: 'Windows',\n    default: 'unknown'\n  })\n});\nexport const getSystemVersion = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.systemVersion,\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  memoKey: 'systemVersion'\n});\nexport const [getBuildId, getBuildIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getBuildId(),\n  syncGetter: () => RNDeviceInfo.getBuildIdSync(),\n  defaultValue: 'unknown'\n});\nexport const [getApiLevel, getApiLevelSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getApiLevel(),\n  syncGetter: () => RNDeviceInfo.getApiLevelSync(),\n  defaultValue: -1\n});\nexport const getBundleId = () => getSupportedPlatformInfoSync({\n  memoKey: 'bundleId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.bundleId\n});\nexport const [getInstallerPackageName, getInstallerPackageNameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows', 'ios'],\n  getter: () => RNDeviceInfo.getInstallerPackageName(),\n  syncGetter: () => RNDeviceInfo.getInstallerPackageNameSync(),\n  defaultValue: 'unknown'\n});\nexport const getApplicationName = () => getSupportedPlatformInfoSync({\n  memoKey: 'appName',\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.appName,\n  supportedPlatforms: ['android', 'ios', 'windows']\n});\nexport const getBuildNumber = () => getSupportedPlatformInfoSync({\n  memoKey: 'buildNumber',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.buildNumber,\n  defaultValue: 'unknown'\n});\nexport const getVersion = () => getSupportedPlatformInfoSync({\n  memoKey: 'version',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.appVersion\n});\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\nexport const [getDeviceName, getDeviceNameSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getDeviceName(),\n  syncGetter: () => RNDeviceInfo.getDeviceNameSync(),\n  defaultValue: 'unknown'\n});\nexport const [getUsedMemory, getUsedMemorySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getUsedMemory(),\n  syncGetter: () => RNDeviceInfo.getUsedMemorySync(),\n  defaultValue: -1\n});\nexport const getUserAgent = () => getSupportedPlatformInfoAsync({\n  memoKey: 'userAgent',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.getUserAgent()\n});\nexport const getUserAgentSync = () => getSupportedPlatformInfoSync({\n  memoKey: 'userAgent',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.getUserAgentSync()\n});\nexport const [getFontScale, getFontScaleSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getFontScale(),\n  syncGetter: () => RNDeviceInfo.getFontScaleSync(),\n  defaultValue: -1\n});\nexport const [getBootloader, getBootloaderSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getBootloader(),\n  syncGetter: () => RNDeviceInfo.getBootloaderSync(),\n  defaultValue: 'unknown'\n});\nexport const [getDevice, getDeviceSync] = getSupportedPlatformInfoFunctions({\n  getter: () => RNDeviceInfo.getDevice(),\n  syncGetter: () => RNDeviceInfo.getDeviceSync(),\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android']\n});\nexport const [getDisplay, getDisplaySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getDisplay(),\n  syncGetter: () => RNDeviceInfo.getDisplaySync(),\n  defaultValue: 'unknown'\n});\nexport const [getFingerprint, getFingerprintSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getFingerprint(),\n  syncGetter: () => RNDeviceInfo.getFingerprintSync(),\n  defaultValue: 'unknown'\n});\nexport const [getHardware, getHardwareSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHardware(),\n  syncGetter: () => RNDeviceInfo.getHardwareSync(),\n  defaultValue: 'unknown'\n});\nexport const [getHost, getHostSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHost(),\n  syncGetter: () => RNDeviceInfo.getHostSync(),\n  defaultValue: 'unknown'\n});\nexport const [getProduct, getProductSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getProduct(),\n  syncGetter: () => RNDeviceInfo.getProductSync(),\n  defaultValue: 'unknown'\n});\nexport const [getTags, getTagsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getTags(),\n  syncGetter: () => RNDeviceInfo.getTagsSync(),\n  defaultValue: 'unknown'\n});\nexport const [getType, getTypeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getType(),\n  syncGetter: () => RNDeviceInfo.getTypeSync(),\n  defaultValue: 'unknown'\n});\nexport const [getBaseOs, getBaseOsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: () => RNDeviceInfo.getBaseOs(),\n  syncGetter: () => RNDeviceInfo.getBaseOsSync(),\n  defaultValue: 'unknown'\n});\nexport const [getPreviewSdkInt, getPreviewSdkIntSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPreviewSdkInt(),\n  syncGetter: () => RNDeviceInfo.getPreviewSdkIntSync(),\n  defaultValue: -1\n});\nexport const [getSecurityPatch, getSecurityPatchSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSecurityPatch(),\n  syncGetter: () => RNDeviceInfo.getSecurityPatchSync(),\n  defaultValue: 'unknown'\n});\nexport const [getCodename, getCodenameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getCodename(),\n  syncGetter: () => RNDeviceInfo.getCodenameSync(),\n  defaultValue: 'unknown'\n});\nexport const [getIncremental, getIncrementalSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getIncremental(),\n  syncGetter: () => RNDeviceInfo.getIncrementalSync(),\n  defaultValue: 'unknown'\n});\nexport const [isEmulator, isEmulatorSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isEmulator(),\n  syncGetter: () => RNDeviceInfo.isEmulatorSync(),\n  defaultValue: false\n});\nexport const isTablet = () => getSupportedPlatformInfoSync({\n  defaultValue: false,\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  memoKey: 'tablet',\n  getter: () => RNDeviceInfo.isTablet\n});\nexport const [isPinOrFingerprintSet, isPinOrFingerprintSetSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isPinOrFingerprintSet(),\n  syncGetter: () => RNDeviceInfo.isPinOrFingerprintSetSync(),\n  defaultValue: false\n});\nlet notch;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n\n    let _model = getModel();\n\n    notch = devicesWithNotch.findIndex(item => item.brand.toLowerCase() === _brand.toLowerCase() && item.model.toLowerCase() === _model.toLowerCase()) !== -1;\n  }\n\n  return notch;\n}\nexport const [hasGms, hasGmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasGms(),\n  syncGetter: () => RNDeviceInfo.hasGmsSync(),\n  defaultValue: false\n});\nexport const [hasHms, hasHmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasHms(),\n  syncGetter: () => RNDeviceInfo.hasHmsSync(),\n  defaultValue: false\n});\nexport const [getFirstInstallTime, getFirstInstallTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getFirstInstallTime(),\n  syncGetter: () => RNDeviceInfo.getFirstInstallTimeSync(),\n  defaultValue: -1\n});\nexport const [getInstallReferrer, getInstallReferrerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getInstallReferrer(),\n  syncGetter: () => RNDeviceInfo.getInstallReferrerSync(),\n  defaultValue: 'unknown'\n});\nexport const [getLastUpdateTime, getLastUpdateTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getLastUpdateTime(),\n  syncGetter: () => RNDeviceInfo.getLastUpdateTimeSync(),\n  defaultValue: -1\n});\nexport const [getPhoneNumber, getPhoneNumberSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPhoneNumber(),\n  syncGetter: () => RNDeviceInfo.getPhoneNumberSync(),\n  defaultValue: 'unknown'\n});\nexport const [getCarrier, getCarrierSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getCarrier(),\n  syncGetter: () => RNDeviceInfo.getCarrierSync(),\n  defaultValue: 'unknown'\n});\nexport const [getTotalMemory, getTotalMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalMemory(),\n  syncGetter: () => RNDeviceInfo.getTotalMemorySync(),\n  defaultValue: -1\n});\nexport const [getMaxMemory, getMaxMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getMaxMemory(),\n  syncGetter: () => RNDeviceInfo.getMaxMemorySync(),\n  defaultValue: -1\n});\nexport const [getTotalDiskCapacity, getTotalDiskCapacitySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalDiskCapacity(),\n  syncGetter: () => RNDeviceInfo.getTotalDiskCapacitySync(),\n  defaultValue: -1\n});\nexport async function getTotalDiskCapacityOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOld();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacity();\n  }\n\n  return -1;\n}\nexport function getTotalDiskCapacityOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOldSync();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\nexport const [getFreeDiskStorage, getFreeDiskStorageSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getFreeDiskStorage(),\n  syncGetter: () => RNDeviceInfo.getFreeDiskStorageSync(),\n  defaultValue: -1\n});\nexport async function getFreeDiskStorageOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOld();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorage();\n  }\n\n  return -1;\n}\nexport function getFreeDiskStorageOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOldSync();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\nexport const [getBatteryLevel, getBatteryLevelSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getBatteryLevel(),\n  syncGetter: () => RNDeviceInfo.getBatteryLevelSync(),\n  defaultValue: -1\n});\nexport const [getPowerState, getPowerStateSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getPowerState(),\n  syncGetter: () => RNDeviceInfo.getPowerStateSync(),\n  defaultValue: {}\n});\nexport const [isBatteryCharging, isBatteryChargingSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isBatteryCharging(),\n  syncGetter: () => RNDeviceInfo.isBatteryChargingSync(),\n  defaultValue: false\n});\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\nexport function isLandscapeSync() {\n  const {\n    height,\n    width\n  } = Dimensions.get('window');\n  return width >= height;\n}\nexport const [isAirplaneMode, isAirplaneModeSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.isAirplaneMode(),\n  syncGetter: () => RNDeviceInfo.isAirplaneModeSync(),\n  defaultValue: false\n});\nexport const getDeviceType = () => {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType\n  });\n};\nexport const getDeviceTypeSync = () => {\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType\n  });\n};\nexport const [supportedAbis, supportedAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getSupportedAbis(),\n  syncGetter: () => RNDeviceInfo.getSupportedAbisSync(),\n  defaultValue: []\n});\nexport const [supported32BitAbis, supported32BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported32BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported32BitAbisSync(),\n  defaultValue: []\n});\nexport const [supported64BitAbis, supported64BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported64BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported64BitAbisSync(),\n  defaultValue: []\n});\nexport async function hasSystemFeature(feature) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n\n  return false;\n}\nexport function hasSystemFeatureSync(feature) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n\n  return false;\n}\nexport function isLowBatteryLevel(level) {\n  if (Platform.OS === 'android') {\n    return level < 0.15;\n  }\n\n  return level < 0.2;\n}\nexport const [getSystemAvailableFeatures, getSystemAvailableFeaturesSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSystemAvailableFeatures(),\n  syncGetter: () => RNDeviceInfo.getSystemAvailableFeaturesSync(),\n  defaultValue: []\n});\nexport const [isLocationEnabled, isLocationEnabledSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.isLocationEnabled(),\n  syncGetter: () => RNDeviceInfo.isLocationEnabledSync(),\n  defaultValue: false\n});\nexport const [isHeadphonesConnected, isHeadphonesConnectedSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.isHeadphonesConnected(),\n  syncGetter: () => RNDeviceInfo.isHeadphonesConnectedSync(),\n  defaultValue: false\n});\nexport const [isMouseConnected, isMouseConnectedSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['windows'],\n  getter: () => RNDeviceInfo.isMouseConnected(),\n  syncGetter: () => RNDeviceInfo.isMouseConnectedSync(),\n  defaultValue: false\n});\nexport const [isKeyboardConnected, isKeyboardConnectedSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['windows'],\n  getter: () => RNDeviceInfo.isKeyboardConnected(),\n  syncGetter: () => RNDeviceInfo.isKeyboardConnectedSync(),\n  defaultValue: false\n});\nexport const isTabletMode = () => getSupportedPlatformInfoAsync({\n  supportedPlatforms: ['windows'],\n  getter: () => RNDeviceInfo.isTabletMode(),\n  defaultValue: false\n});\nexport const [getAvailableLocationProviders, getAvailableLocationProvidersSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getAvailableLocationProviders(),\n  syncGetter: () => RNDeviceInfo.getAvailableLocationProvidersSync(),\n  defaultValue: {}\n});\nexport const [getBrightness, getBrightnessSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['ios'],\n  getter: () => RNDeviceInfo.getBrightness(),\n  syncGetter: () => RNDeviceInfo.getBrightnessSync(),\n  defaultValue: -1\n});\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n\n  return 'unknown';\n}\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel() {\n  const [batteryLevel, setBatteryLevel] = useState(null);\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = level => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelDidChange', onChange);\n    return () => subscription.remove();\n  }, []);\n  return batteryLevel;\n}\nexport function useBatteryLevelIsLow() {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState(null);\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getBatteryLevel();\n      isLowBatteryLevel(initialValue) && setBatteryLevelIsLow(initialValue);\n    };\n\n    setInitialValue();\n\n    const onChange = level => {\n      setBatteryLevelIsLow(level);\n    };\n\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n    return () => subscription.remove();\n  }, []);\n  return batteryLevelIsLow;\n}\nexport function usePowerState() {\n  const [powerState, setPowerState] = useState({});\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = state => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_powerStateDidChange', onChange);\n    return () => subscription.remove();\n  }, []);\n  return powerState;\n}\nexport function useIsHeadphonesConnected() {\n  return useOnEvent('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\nexport function useFirstInstallTime() {\n  return useOnMount(getFirstInstallTime, -1);\n}\nexport function useDeviceName() {\n  return useOnMount(getDeviceName, 'unknown');\n}\nexport function useHasSystemFeature(feature) {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\nexport function useIsEmulator() {\n  return useOnMount(isEmulator, false);\n}\nexport function useManufacturer() {\n  return useOnMount(getManufacturer, 'unknown');\n}\nexport function useBrightness() {\n  const [brightness, setBrightness] = useState(null);\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getBrightness();\n      setBrightness(initialValue);\n    };\n\n    const onChange = value => {\n      setBrightness(value);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_brightnessDidChange', onChange);\n    return () => subscription.remove();\n  }, []);\n  return brightness;\n}\nconst deviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageOld,\n  getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  getBrightness,\n  getBrightnessSync,\n  hasGms,\n  hasGmsSync,\n  hasHms,\n  hasHmsSync,\n  hasNotch,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isMouseConnected,\n  isMouseConnectedSync,\n  isKeyboardConnected,\n  isKeyboardConnectedSync,\n  isTabletMode,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState,\n  useManufacturer,\n  useIsHeadphonesConnected,\n  useBrightness\n};\nexport default deviceInfoModule;\n//# sourceMappingURL=index.js.map"],"names":["EventEmitter","eventType","listener","context","registrations","allocate","registration","_len","args","_key","_i","_arr","registry","RCTDeviceEventEmitter","NativeEventEmitter","nativeModule","Platform","invariant","_this$_nativeModule","subscription","_this$_nativeModule2","_this$_nativeModule3","_this$_nativeModule4","NativeModules","deviceInfoEmitter","batteryCharging","batteryLevel","powerState","_readPowerState","battery","level","charging","chargingtime","dischargingtime","getMaxMemorySync","getInstallReferrerSync","isAirplaneModeSync","getUserAgentSync","isLocationEnabledSync","getTotalMemorySync","getUsedMemorySync","init","getBaseOsSync","userAgent","platform","macosPlatforms","windowsPlatforms","iosPlatforms","os","getInstallReferrer","getUserAgent","isBatteryCharging","isBatteryChargingSync","isCameraPresent","devices","d","isCameraPresentSync","getBatteryLevel","getBatteryLevelSync","isLocationEnabled","isAirplaneMode","getBaseOs","getTotalDiskCapacity","quota","getTotalDiskCapacitySync","getFreeDiskStorage","usage","getFreeDiskStorageSync","getMaxMemory","getUsedMemory","getTotalMemory","getPowerState","getPowerStateSync","RNDeviceInfo","require$$0","RNDeviceInfo$1","memo","getSupportedFunction","supportedPlatforms","getter","defaultGetter","supportedMap","key","getSupportedPlatformInfoSync","defaultValue","memoKey","output","getUniqueId","isTablet"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}