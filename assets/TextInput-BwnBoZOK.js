import{j as t}from"./jsx-runtime-DNHyKP0h.js";import{r as p}from"./index-B-xgG2PE.js";import{I as H}from"./IconButton-BK-ChAcH.js";import{L as F}from"./Label-D2ww6pd8.js";import{C as T}from"./Column-DV_vpfR5.js";import{I as L}from"./Icon-Bjw3hvav.js";import{P as N}from"./Phrase-DlsvAOJU.js";import{a as q}from"./useThemable-DhqiuDXa.js";import{V as w}from"./index-DoMT7H_C.js";import{T as P}from"./index-shQJSbQb.js";import{s as z}from"./index-Cm4QxXoK.js";import{P as $}from"./index-BiinuClr.js";const S=p.forwardRef(({hasClearButton:r=!0,inputInstructions:o,label:i,numberOfLines:n,onChangeText:e,onFocus:a,placeholder:u="",warning:f,value:l="",testID:h="",textTransform:b,accessibilityLanguage:y="nl-NL",...g},d)=>{const m=p.createRef(),[C,I]=p.useState(!1),[V,x]=p.useState(l),v=q(A({hasFocus:C,numberOfLines:n,warning:f})),_=q(D);p.useEffect(()=>{x(l)},[l]);const k=()=>I(!1),B=s=>{const c=b?b(s):s;x(c),e==null||e(c)},E=()=>{var s,c;x(""),e==null||e(""),typeof d!="function"&&((c=(s=(d==null?void 0:d.current)??(m==null?void 0:m.current))==null?void 0:s.focus)==null||c.call(s),j())},j=()=>{I(!0),a==null||a()};return t.jsxs(T,{gutter:"sm",children:[t.jsxs(T,{gutter:"xs",children:[!!i&&t.jsx(F,{isAccessible:!g.accessibilityLabel,text:i}),!!o&&t.jsx(N,{children:o})]}),t.jsxs(w,{style:v.frame,children:[t.jsx(P,{...g,..._,accessibilityLanguage:y,numberOfLines:$.OS==="ios"?void 0:n,onBlur:k,onChangeText:B,onFocus:j,placeholder:u,ref:d??m,style:v.textInput,testID:h,textAlignVertical:"top",value:V}),V&&r?t.jsx(w,{children:t.jsx(H,{accessibilityHint:"Maak dit tekstveld leeg",accessibilityLanguage:y,icon:t.jsx(L,{name:"close",size:"lg",testID:`${h}ClearIcon`}),onPress:E,testID:`${h}ClearButton`})}):null]})]})}),A=({hasFocus:r,numberOfLines:o,warning:i})=>({color:n,size:e,text:a})=>{const u=r||i?2:1,f=e.spacing.md-(u-1),l=e.spacing.sm-(u-1);return z.create({frame:{flexDirection:"row",paddingHorizontal:f,paddingVertical:l,backgroundColor:n.textInput.container.background,borderStyle:"solid",borderColor:i?n.control.warning.border:r?n.control.focus.border:n.control.default.border,borderWidth:u},textInput:{minHeight:o?o*a.lineHeight.body+2*l:"auto",flex:1,padding:0,paddingTop:0,color:n.text.default,fontFamily:a.fontFamily.regular,fontSize:a.fontSize.body}})},D=({color:r})=>({placeholderTextColor:r.text.secondary});try{S.displayName="TextInput",S.__docgenInfo={description:"",displayName:"TextInput",props:{onChangeText:{defaultValue:null,description:`Callback that is called when the text input's text changes.
Changed text is passed as an argument to the callback handler.`,name:"onChangeText",required:!1,type:{name:"(((event: string) => void) & ((text: string) => void))"}},onFocus:{defaultValue:null,description:"Callback that is called when the text input is focused",name:"onFocus",required:!1,type:{name:"((() => void) & ((e: NativeSyntheticEvent<TextInputFocusEventData>) => void))"}},warning:{defaultValue:null,description:"",name:"warning",required:!1,type:{name:"boolean"}},hasClearButton:{defaultValue:{value:"true"},description:"",name:"hasClearButton",required:!1,type:{name:"boolean"}},inputInstructions:{defaultValue:null,description:"",name:"inputInstructions",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},numberOfLines:{defaultValue:null,description:`Sets the number of lines for a TextInput.
Use it with multiline set to true to be able to fill the lines.`,name:"numberOfLines",required:!1,type:{name:"number"}},placeholder:{defaultValue:{value:""},description:"The string that will be rendered before text input has been entered",name:"placeholder",required:!1,type:{name:"string"}},textTransform:{defaultValue:null,description:"",name:"textTransform",required:!1,type:{name:"((text: string) => string)"}}}}}catch{}export{S as T};
