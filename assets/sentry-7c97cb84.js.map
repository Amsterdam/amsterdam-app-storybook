{"version":3,"file":"sentry-7c97cb84.js","sources":["../../src/types/sentry.ts","../../src/processes/sentry.ts"],"sourcesContent":["export enum BreadcrumbCategory {\n  default = 'default',\n  internetConnection = 'internetConnection',\n}\n\nexport type CaptureBreadcrumb = (\n  message?: string,\n  data?: Record<string, unknown>,\n  category?: BreadcrumbCategory,\n) => void\n\nexport type SendErrorLog = (\n  message: string,\n  filename: string,\n  data?: Record<string, unknown>,\n) => void\n\nexport type SentryHandler = {\n  captureSentryBreadcrumb: CaptureBreadcrumb\n  sendSentryErrorLog: SendErrorLog\n}\n","import {BUILD_NUMBER} from '@env'\nimport {NavigationContainerRef} from '@react-navigation/native'\nimport {Action, isRejectedWithValue} from '@reduxjs/toolkit'\nimport {\n  addBreadcrumb,\n  Breadcrumb,\n  captureException,\n  init,\n  ReactNativeTracing,\n  ReactNavigationInstrumentation,\n  setTag,\n  setUser,\n  withScope,\n} from '@sentry/react-native'\nimport {RefObject} from 'react'\nimport {Platform} from 'react-native'\nimport {getUniqueId, getVersion} from 'react-native-device-info'\nimport type {Middleware} from '@reduxjs/toolkit'\nimport {RootStackParams} from '@/app/navigation/types'\nimport {Environment} from '@/environment'\nimport {AppFlavour, appFlavour, devLog, isDevApp} from '@/processes/development'\nimport {\n  BreadcrumbCategory,\n  CaptureBreadcrumb,\n  SendErrorLog,\n} from '@/types/sentry'\n\nconst routingInstrumentation = new ReactNavigationInstrumentation()\n\n/**\n * To be used in the onready of the NavigationContainer: register the navigation with Sentry\n */\nexport const registerNavigationContainer = (\n  ref: RefObject<NavigationContainerRef<RootStackParams>>,\n) => {\n  try {\n    routingInstrumentation.registerNavigationContainer(ref)\n  } catch (e) {\n    devLog(e)\n  }\n}\n\n/**\n * Remove query string from URL as it may contain user data\n */\nconst sanitizeUrl = (url: string) => (url ? url.split('?')[0] : '')\n\n/**\n * The main initialization of Sentry\n */\nexport const initSentry = () => {\n  // We do not log errors when running the app locally, but may want to in the future\n  if (appFlavour === AppFlavour.local) {\n    return\n  }\n\n  const version = getVersion()\n\n  init({\n    dsn: 'https://39ba20d819034bc2a98af077acec8bec@o1315195.ingest.sentry.io/6567463',\n    environment: appFlavour,\n    dist: BUILD_NUMBER,\n    release: `${Platform.OS}@${version}.${BUILD_NUMBER ?? '0'}`,\n    beforeBreadcrumb: (breadcrumb: Breadcrumb) => {\n      // remove query params from request URLS as they may contain personal data\n      if (breadcrumb.category === 'xhr') {\n        return {\n          ...breadcrumb,\n          data: {\n            ...breadcrumb.data,\n            url: sanitizeUrl(breadcrumb.data?.url as string),\n          },\n        }\n      }\n\n      return breadcrumb\n    },\n    // beforeSend: event => event, // process the event before sending it to Sentry\n    // ignoreErrors: [], // can be used to filter out the occasional false positive\n    tracesSampleRate: isDevApp ? 1 : 0.1,\n    integrations: [\n      new ReactNativeTracing({\n        routingInstrumentation,\n      }),\n    ],\n  })\n}\n\n/**\n * Set/update the back end enviroment so in the case of a development app, we know which one was used\n */\nexport const setSentryBackEndEnvironment = (environment: Environment): void => {\n  setTag('backEndEnvironment', environment)\n}\n\n/**\n * Get the function to: add a breadcrumb to the stack trace in the error report\n */\nexport const getCaptureSentryBreadcrumb =\n  (logData: boolean): CaptureBreadcrumb =>\n  (message, data, category = BreadcrumbCategory.default): void => {\n    addBreadcrumb({\n      message,\n      category,\n      data: logData ? data : undefined,\n    })\n  }\n\n/**\n * Get the function to: manually send an error to Sentry; to be used in catch statements and other error handling\n */\nexport const getSendSentryErrorLog =\n  (logData: boolean): SendErrorLog =>\n  (message, filename, data) => {\n    devLog('sendSentryErrorLog', message, filename, data)\n    const extraData = logData ? data : undefined\n\n    withScope(scope => {\n      scope.setContext('data', {filename, ...extraData})\n      captureException(new Error(message))\n    })\n  }\n\n/**\n * Set the user ID to be sent to Sentry; if enabled is false we do not send anything (user ID will be a unique hash)\n */\nexport const setSentryUserData = (enabled: boolean) => {\n  // we explicitly cast user ID to string, since non-string type will cause issues\n  setUser(enabled ? {id: getUniqueId().toString()} : null)\n}\n\n/**\n * RTK middleware to catch API errors and other rejections\n */\nexport const sentryLoggerMiddleware: Middleware =\n  () => next => (action: Action) => {\n    if (isRejectedWithValue(action)) {\n      // @TODO: when we implement the consent feature (user data usage), we can get this from the Redux state and disable Sentry features depending on that setting\n      const consent = true\n      let error = 'Rejected RTK action'\n      let dataWithDangerousSentryScrubbingOverride\n\n      if ((action.meta.arg as {endpointName: string})?.endpointName) {\n        error = `${\n          (action.payload as {originalStatus: string})?.originalStatus ??\n          'Error'\n        } for ${(action.meta.arg as {endpointName: string}).endpointName}`\n\n        // temporarily log additional data for getModulesForApp\n        if (\n          (action.meta.arg as {endpointName: string}).endpointName ===\n          'getModulesForApp'\n        ) {\n          dataWithDangerousSentryScrubbingOverride = (\n            action.meta as unknown as {baseQueryMeta: unknown}\n          ).baseQueryMeta\n        }\n      }\n\n      const url = sanitizeUrl(\n        (\n          action.meta as unknown as {\n            baseQueryMeta?: {request?: {url: string}}\n          }\n        ).baseQueryMeta?.request?.url ?? '',\n      )\n\n      if (!url.startsWith('http://localhost')) {\n        const endpoint = (action.meta.arg as {endpointName: string})\n          .endpointName\n        const status =\n          (action.payload as {originalStatus: string})?.originalStatus ??\n          'unknown'\n\n        setTag('endpoint', endpoint)\n        setTag('status', status)\n        getSendSentryErrorLog(!!consent)(error, 'sentry.ts', {\n          ...action,\n          endpoint,\n          status,\n          url,\n\n          dataWithDangerousSentryScrubbingOverride,\n        })\n        setTag('endpoint', undefined)\n        setTag('status', undefined)\n      }\n    }\n\n    return next(action)\n  }\n"],"names":["BreadcrumbCategory","sanitizeUrl","url","getCaptureSentryBreadcrumb","logData","message","data","category","getSendSentryErrorLog","filename","devLog","sentryLoggerMiddleware","next","action","isRejectedWithValue","error","dataWithDangerousSentryScrubbingOverride","_a","_b","_d","_c","endpoint","status","_e"],"mappings":"mIAAY,IAAAA,GAAAA,IACVA,EAAA,QAAU,UACVA,EAAA,mBAAqB,qBAFXA,IAAAA,GAAA,CAAA,CAAA,EC6CZ,MAAMC,EAAeC,GAAiBA,EAAMA,EAAI,MAAM,GAAG,EAAE,CAAC,EAAI,GAqDnDC,EACVC,GACD,CAACC,EAASC,EAAMC,EAAWP,EAAmB,UAAkB,CAMhE,EAKWQ,EACVJ,GACD,CAACC,EAASI,EAAUH,IAAS,CACpBI,EAAA,qBAAsBL,EAASI,EAAUH,CAAI,CAOtD,EAaWK,EACX,IAAcC,GAACC,GAAmB,eAC5B,GAAAC,EAAoBD,CAAM,EAAG,CAG/B,IAAIE,EAAQ,sBACRC,GAECC,EAAAJ,EAAO,KAAK,MAAZ,MAAAI,EAA4C,eACvCF,EAAA,KACLG,EAAAL,EAAO,UAAP,YAAAK,EAA6C,iBAC9C,OACF,QAASL,EAAO,KAAK,IAA+B,YAAY,GAI7DA,EAAO,KAAK,IAA+B,eAC5C,qBAEAG,EACEH,EAAO,KACP,gBAIN,MAAMX,EAAMD,IAERkB,GAAAC,EAAAP,EAAO,KAGP,gBAHA,YAAAO,EAGe,UAHf,YAAAD,EAGwB,MAAO,EAAA,EAGnC,GAAI,CAACjB,EAAI,WAAW,kBAAkB,EAAG,CACjC,MAAAmB,EAAYR,EAAO,KAAK,IAC3B,aACGS,IACHC,EAAAV,EAAO,UAAP,YAAAU,EAA6C,iBAC9C,UAIFf,EAA+B,EAAEO,EAAO,YAAa,CACnD,GAAGF,EACH,SAAAQ,EACA,OAAAC,EACA,IAAApB,EAEA,yCAAAc,CAAA,CACD,CAGH,CACF,CAEA,OAAOJ,EAAKC,CAAM,CACpB"}