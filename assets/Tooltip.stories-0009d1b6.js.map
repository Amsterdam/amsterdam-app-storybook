{"version":3,"file":"Tooltip.stories-0009d1b6.js","sources":["../../src/components/ui/animations/Fader.tsx","../../src/components/ui/feedback/tooltip/TooltipContent.tsx","../../src/components/ui/utils/mapPlacementToDirection.ts","../../src/components/ui/feedback/tooltip/Tooltip.tsx"],"sourcesContent":["import {ReactNode, forwardRef, useEffect, useRef} from 'react'\nimport {Animated, Easing, StyleProp, View, ViewStyle} from 'react-native'\n\ntype Props = {\n  children: ReactNode\n  duration?: number\n  style?: StyleProp<ViewStyle>\n}\n\nexport const Fader = forwardRef<View, Props>(\n  ({duration = 300, style, children}, ref) => {\n    const fadeAnim = useRef(new Animated.Value(0)).current\n\n    useEffect(() => {\n      Animated.timing(fadeAnim, {\n        easing: Easing.linear,\n        toValue: 1,\n        duration: duration,\n        useNativeDriver: true,\n      }).start()\n    }, [fadeAnim, duration])\n\n    return (\n      <Animated.View\n        ref={ref}\n        style={[\n          style,\n          {\n            opacity: fadeAnim,\n          },\n        ]}>\n        {children}\n      </Animated.View>\n    )\n  },\n)\n","import {StyleSheet} from 'react-native'\nimport {SingleSelectable} from '@/components/ui/containers/SingleSelectable'\nimport {Column} from '@/components/ui/layout/Column'\nimport {Paragraph} from '@/components/ui/text/Paragraph'\nimport {Theme} from '@/themes/themes'\nimport {useThemable} from '@/themes/useThemable'\n\ntype Props = {\n  testID?: string\n  text: string | string[]\n}\n\nexport const TooltipContent = ({testID, text}: Props) => {\n  const styles = useThemable(createStyles)\n  const paragraphs = typeof text === 'string' ? [text] : text\n\n  return (\n    <SingleSelectable\n      accessibilityRole=\"text\"\n      accessible={false}\n      style={styles.tooltip}\n      testID={testID}>\n      <Column gutter=\"sm\">\n        {paragraphs.map((paragraph, index) => (\n          <Paragraph\n            color=\"inverse\"\n            key={paragraph}\n            testID={testID && index === 0 ? `${testID}Paragraph` : undefined}\n            variant=\"small\">\n            {paragraph}\n          </Paragraph>\n        ))}\n      </Column>\n    </SingleSelectable>\n  )\n}\n\nconst createStyles = ({color, size}: Theme) =>\n  StyleSheet.create({\n    tooltip: {\n      padding: size.spacing.md,\n      backgroundColor: color.background.inverse,\n    },\n  })\n","import {Direction, Placement} from '@/components/ui/types'\n\nexport const mapPlacementToDirection = (placement: Placement): Direction => {\n  const mapping: Record<Placement, Direction> = {\n    [Placement.above]: Direction.down,\n    [Placement.below]: Direction.up,\n    [Placement.before]: Direction.right,\n    [Placement.after]: Direction.left,\n  }\n\n  return mapping[placement]\n}\n","import {ElementRef, ReactNode, forwardRef, useEffect, useRef} from 'react'\nimport {\n  AccessibilityProps,\n  LayoutRectangle,\n  Pressable,\n  StyleSheet,\n  View,\n} from 'react-native'\nimport {Fader} from '@/components/ui/animations/Fader'\nimport {Triangle} from '@/components/ui/feedback/Triangle'\nimport {TooltipContent} from '@/components/ui/feedback/tooltip/TooltipContent'\nimport {Column} from '@/components/ui/layout/Column'\nimport {Row} from '@/components/ui/layout/Row'\nimport {Placement, TestProps} from '@/components/ui/types'\nimport {mapPlacementToDirection} from '@/components/ui/utils/mapPlacementToDirection'\nimport {useAccessibilityFocus} from '@/hooks/accessibility/useAccessibilityFocus'\nimport {Theme} from '@/themes/themes'\nimport {SpacingTokens} from '@/themes/tokens/size'\nimport {useThemable} from '@/themes/useThemable'\n\ntype TooltipProps = {\n  defaultIsOpen?: boolean\n  /**\n   * Extra space to set between target and tooltip\n   */\n  extraSpace?: keyof SpacingTokens\n  /**\n   * Determines whether the tooltip fades in and out. Default is 300 ms.\n   */\n  fadeIn?: boolean\n  /**\n   * Duration of the fade-in animation in milliseconds, only works when fade = true\n   */\n  fadeInDuration?: number\n  isOpen: boolean\n  onPress: () => void\n  onboardingTipTargetLayout?: LayoutRectangle\n  placement: Placement\n  text: string | string[]\n} & Pick<AccessibilityProps, 'accessibilityLabel' | 'accessibilityLanguage'> &\n  TestProps\n\ntype WrapperProps = {\n  children: ReactNode\n} & Pick<\n  TooltipProps,\n  | 'extraSpace'\n  | 'fadeIn'\n  | 'fadeInDuration'\n  | 'onboardingTipTargetLayout'\n  | 'placement'\n>\n\nconst Wrapper = forwardRef<View, WrapperProps>(\n  (\n    {\n      extraSpace,\n      placement,\n      onboardingTipTargetLayout,\n      fadeIn,\n      fadeInDuration,\n      ...props\n    },\n    ref,\n  ) => {\n    const styles = useThemable(\n      createStyles({\n        extraSpace,\n        placement,\n        onboardingTipTargetLayout,\n      }),\n    )\n\n    return fadeIn ? (\n      <Fader\n        {...props}\n        duration={fadeInDuration}\n        ref={ref}\n        style={styles.tooltip}\n      />\n    ) : (\n      <View\n        {...props}\n        ref={ref}\n        style={styles.tooltip}\n      />\n    )\n  },\n)\n\nexport const Tooltip = ({\n  accessibilityLabel,\n  accessibilityLanguage = 'nl-NL',\n  extraSpace,\n  fadeIn,\n  fadeInDuration,\n  isOpen,\n  placement,\n  onboardingTipTargetLayout,\n  testID,\n  text,\n  onPress,\n}: TooltipProps) => {\n  const direction = mapPlacementToDirection(placement)\n  const setAccessibilityFocus = useAccessibilityFocus<View>()\n\n  const ref = useRef(null)\n\n  useEffect(() => {\n    if (!ref?.current) {\n      return\n    }\n\n    setAccessibilityFocus(ref.current)\n  }, [isOpen, setAccessibilityFocus])\n\n  if (!isOpen || !onboardingTipTargetLayout) {\n    return null\n  }\n\n  const Pointer = <Triangle direction={direction} />\n\n  return (\n    <Wrapper\n      extraSpace={extraSpace}\n      fadeIn={fadeIn}\n      fadeInDuration={fadeInDuration}\n      onboardingTipTargetLayout={onboardingTipTargetLayout}\n      placement={placement}>\n      <Pressable\n        accessibilityLabel={accessibilityLabel}\n        accessibilityLanguage={accessibilityLanguage}\n        accessibilityRole=\"alert\"\n        onPress={onPress}>\n        <Row>\n          {placement === Placement.after && Pointer}\n          <Column>\n            {placement === Placement.below && Pointer}\n            <TooltipContent\n              testID={testID}\n              text={text}\n            />\n            {placement === Placement.above && Pointer}\n          </Column>\n          {placement === Placement.before && Pointer}\n        </Row>\n      </Pressable>\n    </Wrapper>\n  )\n}\n\nconst createStyles =\n  ({\n    extraSpace,\n    placement,\n    onboardingTipTargetLayout,\n  }: Pick<\n    TooltipProps,\n    'extraSpace' | 'placement' | 'onboardingTipTargetLayout'\n  > & {\n    tooltipHeight?: number\n  }) =>\n  ({size}: Theme) => {\n    const getPosition = (): {\n      bottom?: number\n      left?: number\n      position?: 'absolute' | 'relative'\n      right?: number\n      top?: number\n    } => {\n      if (!onboardingTipTargetLayout) {\n        return {position: 'relative'} // Default position, when no onboardingTipTargetLayout is set\n      }\n\n      const verticalPosition =\n        onboardingTipTargetLayout.height +\n        (extraSpace ? size.spacing[extraSpace] : 0)\n\n      return {\n        left: 0,\n        right: 0,\n        position: 'absolute',\n        ...(placement === Placement.above\n          ? {bottom: verticalPosition}\n          : {top: verticalPosition}),\n      }\n    }\n\n    return StyleSheet.create({\n      tooltip: {\n        flex: 1,\n        alignItems: 'center',\n        paddingHorizontal: size.spacing.lg,\n        ...getPosition(),\n        zIndex: 15, // Set zIndex higher in component tree as well when not working as expected on iOS\n      },\n    })\n  }\n\nexport type Tooltip = ElementRef<typeof Tooltip>\n"],"names":["Fader","forwardRef","duration","style","children","ref","fadeAnim","useRef","Animated","useEffect","Easing","jsx","TooltipContent","testID","text","styles","useThemable","createStyles","paragraphs","SingleSelectable","Column","paragraph","index","Paragraph","color","size","StyleSheet","mapPlacementToDirection","placement","Placement","Direction","Wrapper","extraSpace","onboardingTipTargetLayout","fadeIn","fadeInDuration","props","View","Tooltip","accessibilityLabel","accessibilityLanguage","isOpen","onPress","direction","setAccessibilityFocus","useAccessibilityFocus","Pointer","Triangle","Pressable","jsxs","Row","getPosition","verticalPosition"],"mappings":"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"}