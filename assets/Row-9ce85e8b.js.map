{"version":3,"file":"Row-9ce85e8b.js","sources":["../../src/components/ui/layout/Row.tsx"],"sourcesContent":["import {ReactNode} from 'react'\nimport {FlexStyle, StyleSheet, View} from 'react-native'\nimport {\n  CrossAxisAlignment,\n  MainAxisAlignment,\n} from '@/components/ui/layout/types'\nimport {mapCrossAxisAlignment} from '@/components/ui/layout/utils/mapCrossAxisAlignment'\nimport {mapMainAxisAlignment} from '@/components/ui/layout/utils/mapMainAxisAlignment'\nimport {Theme} from '@/themes/themes'\nimport {SpacingTokens} from '@/themes/tokens/size'\nimport {useThemable} from '@/themes/useThemable'\n\nexport type RowProps = {\n  /** The horizontal alignment of the items in the row. */\n  align?: MainAxisAlignment\n  /** The content of the row. */\n  children: ReactNode\n  /** The amount of horizontal spacing between the items in the row. */\n  gutter?: keyof SpacingTokens\n  /** Whether the items in the row should be reversed. */\n  reverse?: boolean\n  /** The vertical alignment of the items in the row. */\n  valign?: CrossAxisAlignment\n  /** The amount of vertical spacing between the items in the row. */\n  vgutter?: keyof SpacingTokens\n  /** Whether the items in the row should wrap to the next line. */\n  wrap?: boolean\n} & Pick<FlexStyle, 'flex'>\n\n/**\n * Lays out its children horizontally.\n *\n * Allows specifying the amount of spacing between the items, alignment of the items in the row,\n * whether the row should grow to fill the available space, whether the items can wrap to new lines,\n * and whether the items should be displayed in reverse order.\n *\n * @example <Row align=\"start\" gutter=\"md\">â€¦</Row>\n */\nexport const Row = ({\n  align,\n  children,\n  flex,\n  gutter,\n  valign,\n  reverse,\n  vgutter,\n  wrap,\n}: RowProps) => {\n  const styles = useThemable(\n    createStyles({align, flex, gutter, reverse, valign, vgutter, wrap}),\n  )\n\n  return <View style={styles.row}>{children}</View>\n}\n\nconst createStyles =\n  ({align, flex, gutter, reverse, valign, vgutter, wrap}: Partial<RowProps>) =>\n  ({size}: Theme) =>\n    StyleSheet.create({\n      row: {\n        flexDirection: reverse ? 'row-reverse' : 'row',\n        flexWrap: wrap ? 'wrap' : undefined,\n        flex,\n        flexShrink: 1,\n        justifyContent: mapMainAxisAlignment(align),\n        alignItems: mapCrossAxisAlignment(valign),\n        columnGap: gutter && size.spacing[gutter],\n        rowGap:\n          (wrap && vgutter && size.spacing[vgutter]) ||\n          (wrap && gutter && size.spacing[gutter]) ||\n          undefined,\n      },\n    })\n"],"names":["Row","align","children","flex","gutter","valign","reverse","vgutter","wrap","styles","useThemable","createStyles","jsx","View","size","StyleSheet","mapMainAxisAlignment","mapCrossAxisAlignment"],"mappings":"kKAsCO,MAAAA,EAAA,CAAA,CAAa,MAAAC,EAClB,SAAAC,EACA,KAAAC,EACA,OAAAC,EACA,OAAAC,EACA,QAAAC,EACA,QAAAC,EACA,KAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,EAAeC,EAAA,CAAA,MAAAV,EAAA,KAAAE,EAAA,OAAAC,EAAA,QAAAE,EAAA,OAAAD,EAAA,QAAAE,EAAA,KAAAC,EAAA,CACqD,EAGpE,OAAAI,EAAAC,EAAA,CAAA,MAAAJ,EAAA,IAAA,SAAAP,CAAA,CAAA,CACF,EAEAS,EAAA,CAAA,CAAA,MAAAV,EAAA,KAAAE,EAAA,OAAAC,EAAA,QAAAE,EAAA,OAAAD,EAAA,QAAAE,EAAA,KAAAC,CAAA,IAAA,CAAA,CAAA,KAAAM,CAAA,IAAAC,EAAA,OAAA,CAGsB,IAAA,CACX,cAAAT,EAAA,cAAA,MACsC,SAAAE,EAAA,OAAA,OACf,KAAAL,EAC1B,WAAA,EACY,eAAAa,EAAAf,CAAA,EAC8B,WAAAgB,EAAAZ,CAAA,EACF,UAAAD,GAAAU,EAAA,QAAAV,CAAA,EACA,OAAAI,GAAAD,GAAAO,EAAA,QAAAP,CAAA,GAAAC,GAAAJ,GAAAU,EAAA,QAAAV,CAAA,GAAA,MAItC,CAEN,CAAA;;;;"}