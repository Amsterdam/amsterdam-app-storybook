{"version":3,"file":"Tooltip.stories-6795ec22.js","sources":["../../src/components/ui/utils/mapPlacementToDirection.ts","../../src/components/ui/feedback/Tooltip.tsx"],"sourcesContent":["import {Direction, Placement} from '@/components/ui/types'\n\nexport const mapPlacementToDirection = (placement: Placement): Direction => {\n  const mapping: Record<Placement, Direction> = {\n    [Placement.above]: Direction.down,\n    [Placement.below]: Direction.up,\n    [Placement.before]: Direction.right,\n    [Placement.after]: Direction.left,\n  }\n\n  return mapping[placement]\n}\n","import {ElementRef} from 'react'\nimport {AccessibilityProps, StyleSheet} from 'react-native'\nimport {Pressable} from '@/components/ui/buttons/Pressable'\nimport {SingleSelectable} from '@/components/ui/containers/SingleSelectable'\nimport {Triangle} from '@/components/ui/feedback/Triangle'\nimport {Column} from '@/components/ui/layout/Column'\nimport {Row} from '@/components/ui/layout/Row'\nimport {Paragraph} from '@/components/ui/text/Paragraph'\nimport {Placement, TestProps} from '@/components/ui/types'\nimport {mapPlacementToDirection} from '@/components/ui/utils/mapPlacementToDirection'\nimport {useAccessibilityFocus} from '@/hooks/accessibility/useAccessibilityFocus'\nimport {Theme} from '@/themes/themes'\nimport {useThemable} from '@/themes/useThemable'\n\ntype Props = {\n  isOpen: boolean\n  onPress: () => void\n  placement: Placement\n  text: string | string[]\n} & Pick<AccessibilityProps, 'accessibilityLabel' | 'accessibilityLanguage'> &\n  TestProps\n\nconst TooltipContent = ({testID, text}: Pick<Props, 'testID' | 'text'>) => {\n  const styles = useThemable(createStyles)\n  const paragraphs = typeof text === 'string' ? [text] : text\n\n  return (\n    <SingleSelectable\n      accessibilityRole=\"text\"\n      accessible={false}\n      style={styles.tooltip}\n      testID={testID}>\n      <Column gutter=\"sm\">\n        {paragraphs.map((paragraph, index) => (\n          <Paragraph\n            color=\"inverse\"\n            key={paragraph}\n            testID={testID && index === 0 ? `${testID}Paragraph` : undefined}\n            variant=\"small\">\n            {paragraph}\n          </Paragraph>\n        ))}\n      </Column>\n    </SingleSelectable>\n  )\n}\n\nexport const Tooltip = ({\n  accessibilityLabel,\n  accessibilityLanguage = 'nl-NL',\n  isOpen,\n  placement,\n  testID,\n  text,\n  onPress,\n}: Props) => {\n  const props = {direction: mapPlacementToDirection(placement)}\n  const setAccessibilityFocus = useAccessibilityFocus()\n\n  if (!isOpen) {\n    return null\n  }\n\n  return (\n    <Pressable\n      accessibilityLabel={accessibilityLabel}\n      accessibilityLanguage={accessibilityLanguage}\n      insetHorizontal=\"lg\"\n      onPress={onPress}\n      ref={setAccessibilityFocus}>\n      <Row>\n        {placement === Placement.after && <Triangle {...props} />}\n        <Column>\n          {placement === Placement.below && <Triangle {...props} />}\n          <TooltipContent\n            testID={testID}\n            text={text}\n          />\n          {placement === Placement.above && <Triangle {...props} />}\n        </Column>\n        {placement === Placement.before && <Triangle {...props} />}\n      </Row>\n    </Pressable>\n  )\n}\n\nconst createStyles = ({color, size}: Theme) =>\n  StyleSheet.create({\n    tooltip: {\n      padding: size.spacing.md,\n      backgroundColor: color.background.inverse,\n    },\n  })\n\nexport type Tooltip = ElementRef<typeof Tooltip>\n"],"names":["mapPlacementToDirection","placement","Placement","Direction","TooltipContent","testID","text","styles","useThemable","createStyles","paragraphs","jsx","SingleSelectable","Column","paragraph","index","Paragraph","Tooltip","accessibilityLabel","accessibilityLanguage","isOpen","onPress","props","setAccessibilityFocus","useAccessibilityFocus","Pressable","jsxs","Row","Triangle","color","size","StyleSheet"],"mappings":"ijCAEa,MAAAA,EAA2BC,IACQ,CAC5C,CAACC,EAAU,KAAK,EAAGC,EAAU,KAC7B,CAACD,EAAU,KAAK,EAAGC,EAAU,GAC7B,CAACD,EAAU,MAAM,EAAGC,EAAU,MAC9B,CAACD,EAAU,KAAK,EAAGC,EAAU,IAAA,GAGhBF,CAAS,ECY1BG,EAAA,CAAA,CAAA,OAAAC,EAAA,KAAAC,KAAA,CACE,MAAAC,EAAAC,EAAAC,CAAA,EACAC,EAAA,OAAAJ,GAAA,SAAA,CAAAA,CAAA,EAAAA,EAEA,OAAAK,EACEC,EAAC,CAAA,kBAAA,OACmB,WAAA,GACN,MAAAL,EAAA,QACE,OAAAF,EACd,SAAAM,EAAAE,EAAA,CAAA,OAAA,KAAA,SAAAH,EAAA,IAAA,CAAAI,EAAAC,IAAAJ,EAGIK,EAAC,CAAA,MAAA,UACO,OAAAX,GAAAU,IAAA,EAAA,GAAAV,CAAA,YAAA,OAEiD,QAAA,QAC/C,SAAAS,CACP,EAAAA,CAHI,CAAA,EAAA,CAMX,CAAA,CAGN,EAEOG,EAAA,CAAA,CAAiB,mBAAAC,EACtB,sBAAAC,EAAA,QACwB,OAAAC,EACxB,UAAAnB,EACA,OAAAI,EACA,KAAAC,EACA,QAAAe,CAEF,IAAA,CACE,MAAAC,EAAA,CAAA,UAAAtB,EAAAC,CAAA,CAAA,EACAsB,EAAAC,IAEA,OAAAJ,EAIAT,EACEc,EAAC,CAAA,mBAAAP,EACC,sBAAAC,EACA,gBAAA,KACgB,QAAAE,EAChB,IAAAE,EACK,SAAAG,EAAAC,EAAA,CAAA,SAAA,CAEF1B,IAAAC,EAAA,OAAAS,EAAAiB,EAAA,CAAA,GAAAN,EAAA,EAAsDI,EAAAb,EAAA,CAAA,SAAA,CAEpDZ,IAAAC,EAAA,OAAAS,EAAAiB,EAAA,CAAA,GAAAN,EAAA,EAAsDX,EACvDP,EAAC,CAAA,OAAAC,EACC,KAAAC,CACA,CAAA,EACFL,IAAAC,EAAA,OAAAS,EAAAiB,EAAA,CAAA,GAAAN,EAAA,CACuD,EAAA,EACzDrB,IAAAC,EAAA,QAAAS,EAAAiB,EAAA,CAAA,GAAAN,EAAA,CACwD,EAAA,CAC1D,CAAA,EArBF,IAwBJ,EAEAb,EAAA,CAAA,CAAA,MAAAoB,EAAA,KAAAC,CAAA,IAAAC,EAAA,OAAA,CACoB,QAAA,CACP,QAAAD,EAAA,QAAA,GACe,gBAAAD,EAAA,WAAA,OACY,CAEtC,CAAA;;;;;;;;;;"}