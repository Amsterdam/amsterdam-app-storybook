import{j as t}from"./jsx-runtime-DNHyKP0h.js";import{r as m}from"./index-B-xgG2PE.js";import{I as H}from"./IconButton-CuF4z_5A.js";import{L as B}from"./Label-Bbuyvxfe.js";import{C as v}from"./Column-jgmBfZ-s.js";import{I as F}from"./Icon-CYgofy4Y.js";import{P as L}from"./Phrase-CZzwuUlw.js";import{a as T}from"./useThemable-BoIQ4zZO.js";import{V as w}from"./index-DoMT7H_C.js";import{T as N}from"./index-shQJSbQb.js";import{s as P}from"./index-Cm4QxXoK.js";import{P as z}from"./index-BiinuClr.js";const S=m.forwardRef(({inputInstructions:n,label:l,numberOfLines:o,onChangeText:e,onFocus:a,placeholder:i="",warning:d,value:u="",testID:s="",textTransform:h,accessibilityLanguage:b="nl-NL",...y},c)=>{const f=m.createRef(),[q,g]=m.useState(!1),[I,x]=m.useState(u),V=T($({hasFocus:q,numberOfLines:o,warning:d})),_=T(A);m.useEffect(()=>{x(u)},[u]);const k=()=>g(!1),C=r=>{const p=h?h(r):r;x(p),e==null||e(p)},E=()=>{var r,p;x(""),e==null||e(""),typeof c!="function"&&((p=(r=(c==null?void 0:c.current)??(f==null?void 0:f.current))==null?void 0:r.focus)==null||p.call(r),j())},j=()=>{g(!0),a==null||a()};return t.jsxs(v,{gutter:"sm",children:[t.jsxs(v,{gutter:"xs",children:[!!l&&t.jsx(B,{isAccessible:!y.accessibilityLabel,text:l}),!!n&&t.jsx(L,{children:n})]}),t.jsxs(w,{style:V.frame,children:[t.jsx(N,{...y,..._,accessibilityLanguage:b,numberOfLines:z.OS==="ios"?void 0:o,onBlur:k,onChangeText:C,onFocus:j,placeholder:i,ref:c??f,style:V.textInput,testID:s,textAlignVertical:"top",value:I}),I?t.jsx(w,{children:t.jsx(H,{accessibilityHint:"Maak dit tekstveld leeg",accessibilityLanguage:b,icon:t.jsx(F,{name:"close",size:"lg",testID:`${s}ClearIcon`}),onPress:E,testID:`${s}ClearButton`})}):null]})]})}),$=({hasFocus:n,numberOfLines:l,warning:o})=>({color:e,size:a,text:i})=>{const d=n||o?2:1,u=a.spacing.md-(d-1),s=a.spacing.sm-(d-1);return P.create({frame:{flexDirection:"row",paddingHorizontal:u,paddingVertical:s,backgroundColor:e.textInput.container.background,borderStyle:"solid",borderColor:o?e.control.warning.border:n?e.control.focus.border:e.control.default.border,borderWidth:d},textInput:{minHeight:l?l*i.lineHeight.body+2*s:"auto",flex:1,padding:0,paddingTop:0,color:e.text.default,fontFamily:i.fontFamily.regular,fontSize:i.fontSize.body}})},A=({color:n})=>({placeholderTextColor:n.text.secondary});try{S.displayName="TextInput",S.__docgenInfo={description:"",displayName:"TextInput",props:{onChangeText:{defaultValue:null,description:`Callback that is called when the text input's text changes.
Changed text is passed as an argument to the callback handler.`,name:"onChangeText",required:!1,type:{name:"(((event: string) => void) & ((text: string) => void))"}},onFocus:{defaultValue:null,description:"Callback that is called when the text input is focused",name:"onFocus",required:!1,type:{name:"((() => void) & ((e: NativeSyntheticEvent<TextInputFocusEventData>) => void))"}},warning:{defaultValue:null,description:"",name:"warning",required:!1,type:{name:"boolean"}},inputInstructions:{defaultValue:null,description:"",name:"inputInstructions",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},numberOfLines:{defaultValue:null,description:`Sets the number of lines for a TextInput.
Use it with multiline set to true to be able to fill the lines.`,name:"numberOfLines",required:!1,type:{name:"number"}},placeholder:{defaultValue:{value:""},description:"The string that will be rendered before text input has been entered",name:"placeholder",required:!1,type:{name:"string"}},textTransform:{defaultValue:null,description:"",name:"textTransform",required:!1,type:{name:"((text: string) => string)"}}}}}catch{}export{S as T};
