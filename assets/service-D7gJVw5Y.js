import{a as d,b as n}from"./types-Bbg4thQy.js";import{M as o}from"./useTrackException-DEzXmbBu.js";import{g as m,S as c,a as P,b as S,c as T}from"./secureStorage-DWlxpMhU.js";import{d as g,a as p}from"./development-Cvxij4Vy.js";const w=()=>({secureParkingAccount:void 0,isLoading:!1}),y=async s=>{try{const e=await m(s===d.permitHolder?c.parkingPermitHolder:c.parkingVisitor);return e?JSON.parse(e):void 0}catch(e){return g(e),Promise.reject(e)}},h=async s=>{try{return await P(s.scope===d.permitHolder?c.parkingPermitHolder:c.parkingVisitor,JSON.stringify(s))}catch(e){return e}},f=(s,e,r,a,t)=>{h(s).then(()=>{e(S(s.scope===d.permitHolder?c.parkingPermitHolder:c.parkingVisitor)),g("Token parking account successful refreshed"),r("New token, so old request should fail"),a()},()=>{p("Token parking account save failed"),t(new Error("New token could not be saved"))})},v=(s,e,r)=>new Promise((a,t)=>{if(!s){p("No account type provided"),t(new Error("No account type provided  "));return}y(s).then(u=>{u&&e(l.endpoints[n.login].initiate({pin:u.pin,report_code:u.reportCode})).unwrap().then(({access_token:k})=>f({...u,accessToken:k},e,r,a,t),()=>{p("Token refresh failed, you are now logged out"),r("Session ended"),t(new Error("Token refresh failed"))})})}),i=async({error:s},{dispatch:e,getState:r},a)=>{if((s==null?void 0:s.status)===403){const{currentAccountType:t}=r().parking;return v(t,e,a)}else a("no access")},l=T.injectEndpoints({endpoints:s=>({[n.accountDetails]:s.query({query:e=>({headers:{"SSP-Access-Token":e},method:"GET",slug:o.parking,url:"/account-details",afterError:i})}),[n.addLicensePlate]:s.mutation({invalidatesTags:["LicensePlates"],query:({accessToken:e,...r})=>({headers:{"SSP-Access-Token":e},body:r,method:"POST",slug:o.parking,url:"/license-plate",afterError:i})}),[n.licensePlates]:s.query({providesTags:["LicensePlates"],query:({accessToken:e,reportCode:r})=>({headers:{"SSP-Access-Token":e},method:"GET",params:{report_code:r},slug:o.parking,url:"/license-plates",afterError:i})}),[n.login]:s.mutation({query:e=>({body:e,method:"POST",slug:o.parking,url:"/login"})}),[n.parkingSessions]:s.query({providesTags:["ParkingSessions"],query:({accessToken:e,...r})=>({headers:{"SSP-Access-Token":e},method:"GET",params:r,slug:o.parking,url:"/sessions",afterError:i})}),[n.permits]:s.query({query:e=>({headers:{"SSP-Access-Token":e},method:"GET",slug:o.parking,url:"/permits",afterError:i})}),[n.removeLicensePlate]:s.mutation({invalidatesTags:["LicensePlates"],query:({accessToken:e,...r})=>({headers:{"SSP-Access-Token":e},body:r,method:"DELETE",slug:o.parking,url:"/license-plate",afterError:i})})}),overrideExisting:!0}),{useAccountDetailsQuery:N,useAddLicensePlateMutation:H,useLicensePlatesQuery:M,useLoginMutation:G,useParkingSessionsQuery:I,useRemoveLicensePlateMutation:O,usePermitsQuery:Q}=l;export{w as a,H as b,I as u};
