import{b as d,c as t}from"./types-CmlL5fa4.js";import{M as r}from"./useTrackException-DirxRx8f.js";import{g as m,S as u,a as P,b as T,c as h,d as g}from"./api-dsuAWrzo.js";import{d as l,a as p}from"./development-DQdBRrdh.js";const y=async s=>{try{const e=await m(s===d.permitHolder?u.parkingPermitHolder:u.parkingVisitor);return e?JSON.parse(e):void 0}catch(e){return l(e),Promise.reject(e)}},E=async s=>{try{return await P(s.scope===d.permitHolder?u.parkingPermitHolder:u.parkingVisitor,JSON.stringify(s))}catch(e){return e}},v=(s,e,n,o,a)=>{E(s).then(()=>{e(T(s.scope===d.permitHolder?u.parkingPermitHolder:u.parkingVisitor)),l("Token parking account successful refreshed"),n("New token, so old request should fail"),o()},()=>{p("Token parking account save failed"),a(new Error("New token could not be saved"))})},A=(s,e,n)=>new Promise((o,a)=>{if(!s){p("No account type provided"),a(new Error("No account type provided  "));return}y(s).then(c=>{c&&e(k.endpoints[t.login].initiate({pin:c.pin,report_code:c.reportCode})).unwrap().then(({access_token:S})=>v({...c,accessToken:S},e,n,o,a),()=>{p("Token refresh failed, you are now logged out"),n("Session ended"),a(new Error("Token refresh failed"))})})}),i=async({error:s},{dispatch:e,getState:n},o)=>{if((s==null?void 0:s.status)===403){const{currentAccountType:a}=n().parking;return A(a,e,o)}else o("no access")},k=h.injectEndpoints({endpoints:s=>({[t.accountDetails]:s.query({query:e=>({headers:{"SSP-Access-Token":e},method:"GET",slug:r.parking,url:"/account-details",afterError:i})}),[t.addLicensePlate]:s.mutation({invalidatesTags:["LicensePlates"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},body:n,method:"POST",slug:r.parking,url:"/license-plate",afterError:i})}),[t.licensePlates]:s.query({providesTags:["LicensePlates"],query:({accessToken:e,reportCode:n})=>({headers:{"SSP-Access-Token":e},method:"GET",params:{report_code:n},slug:r.parking,url:"/license-plates",afterError:i})}),[t.login]:s.mutation({query:e=>({body:e,method:"POST",slug:r.parking,url:"/login"})}),[t.parkingSessions]:s.query({providesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"GET",params:n,slug:r.parking,url:"/sessions",afterError:i})}),[t.permits]:s.query({query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"GET",slug:r.parking,url:g({path:"/permits",params:n}),afterError:i})}),[t.sessionReceipt]:s.query({query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"GET",slug:r.parking,url:g({path:"/session/receipt",params:n}),afterError:i})}),[t.startSession]:s.mutation({invalidatesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},body:n,method:"POST",slug:r.parking,url:"/session",afterError:i})}),[t.editSession]:s.mutation({invalidatesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},body:n,method:"PATCH",slug:r.parking,url:"/session",afterError:i})}),[t.deleteSession]:s.mutation({invalidatesTags:["ParkingSessions"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},method:"DELETE",slug:r.parking,url:g({path:"/session",params:n}),afterError:i})}),[t.removeLicensePlate]:s.mutation({invalidatesTags:["LicensePlates"],query:({accessToken:e,...n})=>({headers:{"SSP-Access-Token":e},body:n,method:"DELETE",slug:r.parking,url:"/license-plate",afterError:i})})}),overrideExisting:!0}),{useAccountDetailsQuery:M,useAddLicensePlateMutation:H,useLicensePlatesQuery:N,useLoginMutation:D,useParkingSessionsQuery:G,useRemoveLicensePlateMutation:O,usePermitsQuery:Q,useSessionReceiptQuery:I,useStartSessionMutation:V,useEditSessionMutation:x,useDeleteSessionMutation:C}=k;export{H as a,D as b,G as u};
