{"version":3,"file":"Alert.stories-133f2152.js","sources":["../../src/components/ui/feedback/Alert.types.ts","../../src/utils/accessibility/focusOnElement.ts","../../src/hooks/accessibility/useAccessibilityFocus.ts","../../node_modules/@react-navigation/core/lib/module/useNavigation.js","../../src/hooks/navigation/useNavigation.ts","../../src/hooks/navigation/useBeforeRemove.ts","../../src/hooks/redux/useDispatch.ts","../../src/components/ui/feedback/Alert.tsx"],"sourcesContent":["import {IconName} from '@/components/ui/media/iconPaths'\n\nexport enum AlertCloseType {\n  withButton = 'withButton',\n  withoutButton = 'withoutButton',\n}\n\nexport enum AlertVariant {\n  information = 'information',\n  negative = 'negative',\n  positive = 'positive',\n}\n\nexport type AlertVariantConfig = {\n  [v in AlertVariant]: {\n    backgroundColor: string\n    borderColor: string\n    borderWidth: number\n    iconName: IconName\n  }\n}\n","import {Component} from 'react'\nimport {findNodeHandle, AccessibilityInfo} from 'react-native'\nimport {devError} from '@/processes/development'\n\n/** Set accessibility focus to element reference\n *\n * @param elementRef - React component reference\n */\nexport const focusOnElement = (elementRef: Component) => {\n  const node = findNodeHandle(elementRef)\n\n  if (!node) {\n    devError('focusOnElement', 'node is not found')\n\n    return\n  }\n\n  AccessibilityInfo.setAccessibilityFocus(node)\n}\n","import {Component, useCallback} from 'react'\nimport {FocusDelay} from '@/hooks/accessibility/types'\nimport {focusOnElement} from '@/utils/accessibility/focusOnElement'\nimport {setFocusDelay} from '@/utils/accessibility/setFocusDelay'\n\n/**\n * Set accessibility focus on a component\n *\n * @param {number} focusDelay - Duration before focus is set: 'none', 'short', 'normal', 'afterAnimations', 'afterInitialFocus', 'long'\n */\n\nexport const useAccessibilityFocus = <T extends Component>(\n  focusDelay: FocusDelay,\n) =>\n  useCallback(\n    (ref: T | null) => {\n      // If the ref is null (e.g., during unmount), clear the timeout\n      if (!ref) {\n        return\n      }\n\n      setFocusDelay(() => focusOnElement(ref), focusDelay)\n    },\n    [focusDelay],\n  )\n","import * as React from 'react';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\n/**\n * Hook to access the navigation prop of the parent screen anywhere.\n *\n * @returns Navigation prop of the parent screen.\n */\nexport default function useNavigation() {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationContext);\n  if (navigation === undefined && root === undefined) {\n    throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n  }\n\n  // FIXME: Figure out a better way to do this\n  return navigation ?? root;\n}\n//# sourceMappingURL=useNavigation.js.map","// eslint-disable-next-line no-restricted-imports\nimport {useNavigation as useNavigationOriginal} from '@react-navigation/native'\nimport {NavigationProp, RootStackParams} from '@/app/navigation/types'\n\nexport const useNavigation = <RouteName extends keyof RootStackParams>() =>\n  useNavigationOriginal<NavigationProp<RouteName>>()\n","import {useEffect} from 'react'\nimport {useNavigation} from '@/hooks/navigation/useNavigation'\n\n/**\n * Do something, e.g. a clean up action, when the user navigates to another screen.\n */\nexport const useBeforeRemove = (callback: () => unknown) => {\n  const navigation = useNavigation()\n\n  useEffect(\n    () => navigation.addListener('beforeRemove', callback),\n    [callback, navigation],\n  )\n}\n","import {useDispatch as useDispatchOriginal} from 'react-redux'\nimport {store} from '@/store/store'\n\nexport const useDispatch = () => useDispatchOriginal<typeof store.dispatch>()\n","import {FC, Fragment, ReactNode, useCallback, useEffect} from 'react'\nimport {\n  LayoutAnimation,\n  Platform,\n  Pressable,\n  StyleSheet,\n  UIManager,\n  View,\n} from 'react-native'\nimport {IconButton} from '@/components/ui/buttons/IconButton'\nimport {Box} from '@/components/ui/containers/Box'\nimport {SingleSelectable} from '@/components/ui/containers/SingleSelectable'\nimport {\n  AlertCloseType,\n  AlertVariant,\n  AlertVariantConfig,\n} from '@/components/ui/feedback/Alert.types'\nimport {Column} from '@/components/ui/layout/Column'\nimport {Row} from '@/components/ui/layout/Row'\nimport {Icon} from '@/components/ui/media/Icon'\nimport {Paragraph} from '@/components/ui/text/Paragraph'\nimport {Title} from '@/components/ui/text/Title'\nimport {useAccessibilityFocus} from '@/hooks/accessibility/useAccessibilityFocus'\nimport {useBeforeRemove} from '@/hooks/navigation/useBeforeRemove'\nimport {useDispatch} from '@/hooks/redux/useDispatch'\nimport {useSelector} from '@/hooks/redux/useSelector'\nimport {useIsReduceMotionEnabled} from '@/hooks/useIsReduceMotionEnabled'\nimport {resetAlert, selectAlert} from '@/store/slices/alert'\nimport {Theme} from '@/themes/themes'\nimport {useThemable} from '@/themes/useThemable'\nimport {accessibleText} from '@/utils/accessibility/accessibleText'\n\nif (\n  Platform.OS === 'android' &&\n  UIManager.setLayoutAnimationEnabledExperimental\n) {\n  UIManager.setLayoutAnimationEnabledExperimental(true)\n}\n\nexport const Alert = () => {\n  const setAccessibilityFocus = useAccessibilityFocus('afterInitialFocus')\n  const dispatch = useDispatch()\n  const isReduceMotionEnabled = useIsReduceMotionEnabled()\n\n  const alert = useSelector(selectAlert)\n  const {closeType, content, testID, variant, withIcon} = alert\n  const variantConfig = useThemable(createVariantConfig)\n  const iconName = variantConfig[variant ?? AlertVariant.information].iconName\n\n  const styles = useThemable(createStyles(variant, variantConfig))\n\n  const reset = useCallback(() => dispatch(resetAlert()), [dispatch])\n\n  useBeforeRemove(reset)\n\n  useEffect(() => {\n    reset() // triggers when navigation navigates to new screen\n  }, [reset])\n\n  if (!alert.content) {\n    return null\n  }\n\n  const WrapperComponent: FC<{children: ReactNode}> =\n    closeType === AlertCloseType.withoutButton\n      ? props => (\n          <Pressable\n            accessibilityRole=\"button\"\n            onPress={() => {\n              if (!isReduceMotionEnabled) {\n                LayoutAnimation.configureNext(\n                  LayoutAnimation.Presets.easeInEaseOut,\n                )\n              }\n\n              dispatch(resetAlert())\n            }}\n            {...props}\n          />\n        )\n      : Fragment\n\n  return (\n    <Box>\n      <WrapperComponent>\n        <View\n          accessibilityRole=\"alert\"\n          accessible\n          ref={setAccessibilityFocus}\n          style={styles?.view}\n          testID={testID}>\n          <Row align=\"between\">\n            <SingleSelectable\n              accessibilityLabel={accessibleText(content?.title, content?.text)}\n              accessibilityRole=\"alert\">\n              <Row gutter=\"md\">\n                {!!withIcon && (\n                  <Icon\n                    color=\"link\"\n                    name={iconName}\n                    size=\"lg\"\n                  />\n                )}\n                <Column>\n                  {!!content?.title && (\n                    <Title\n                      level=\"h4\"\n                      text={content?.title}\n                    />\n                  )}\n                  <Paragraph>{content?.text}</Paragraph>\n                </Column>\n              </Row>\n            </SingleSelectable>\n            {closeType === AlertCloseType.withButton && (\n              <View>\n                <IconButton\n                  accessibilityHint=\"Sluit melding\"\n                  icon={\n                    <Icon\n                      color=\"link\"\n                      name=\"close\"\n                      size=\"lg\"\n                    />\n                  }\n                  onPress={() => dispatch(resetAlert())}\n                />\n              </View>\n            )}\n          </Row>\n        </View>\n      </WrapperComponent>\n    </Box>\n  )\n}\n\nconst createStyles =\n  (variant: AlertVariant, variantConfig: AlertVariantConfig) =>\n  ({size}: Theme) => {\n    if (!variant) {\n      return\n    }\n\n    const {backgroundColor, borderColor, borderWidth} = variantConfig[variant]\n\n    return StyleSheet.create({\n      view: {\n        backgroundColor,\n        borderWidth,\n        borderColor,\n        paddingHorizontal: size.spacing.lg,\n        paddingVertical: size.spacing.md,\n      },\n    })\n  }\n\nconst createVariantConfig = ({color}: Theme): AlertVariantConfig => ({\n  [AlertVariant.information]: {\n    backgroundColor: color.box.background.alert,\n    borderColor: color.box.background.alert,\n    borderWidth: 2,\n    iconName: 'alert',\n  },\n  [AlertVariant.negative]: {\n    backgroundColor: color.box.background.white,\n    borderColor: color.severity.negative,\n    borderWidth: 2,\n    iconName: 'alert',\n  },\n  [AlertVariant.positive]: {\n    backgroundColor: color.box.background.white,\n    borderColor: color.severity.positive,\n    borderWidth: 2,\n    iconName: 'checkmark',\n  },\n})\n"],"names":["AlertCloseType","AlertVariant","focusOnElement","elementRef","node","findNodeHandle","devError","AccessibilityInfo","useAccessibilityFocus","focusDelay","useCallback","ref","setFocusDelay","useNavigation","root","React.useContext","NavigationContainerRefContext","navigation","NavigationContext","useNavigationOriginal","useBeforeRemove","callback","useEffect","useDispatch","useDispatchOriginal","Platform","UIManager","Alert","setAccessibilityFocus","dispatch","isReduceMotionEnabled","useIsReduceMotionEnabled","alert","useSelector","selectAlert","closeType","content","testID","variant","withIcon","variantConfig","useThemable","createVariantConfig","iconName","styles","createStyles","reset","resetAlert","WrapperComponent","props","jsx","Pressable","LayoutAnimation","Fragment","Box","View","jsxs","Row","SingleSelectable","accessibleText","Icon","Column","Title","Paragraph","IconButton","size","backgroundColor","borderColor","borderWidth","StyleSheet","color"],"mappings":"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","x_google_ignoreList":[3]}